#+TITLE: Emacs Configuration File
#+AUTHOR: yago
#+DESCRIPTION: An Org based Emacs configuration.
#+KEYWORDS: emacs, org, config, init.el
#+LANGUAGE: en
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* INIT

  In the beggining...

** Bootstrap
*** Header

    Define the package header as a "head-up" and avoid warnings.

    #+BEGIN_SRC emacs-lisp

    ;;; Package --- Emacs configuration (init.el)
    ;;; Commentary: try things out
    ;;; Code:

    #+END_SRC

*** Lexical

    Lexical binding opens up many more opportunities
    for optimization, so programs using it are likely to run
    faster in future Emacs versions.

    Lexical binding is also more compatible with concurrency,
    which was added to Emacs in version 26.1.

    #+BEGIN_SRC emacs-lisp

    ;;; -*- lexical-binding: t -*-

    #+END_SRC

*** Verify
**** Version

     Verify emacs version.

     #+BEGIN_SRC emacs-lisp

     (when (version< emacs-version "26.3")
       (error "This requires Emacs 26.3 and above!"))

     #+END_SRC

*** Loaddefs

    Emacs Lisp > Loading > Autoload

    The "autoload" facility lets you register the existence of a function
    or macro, but put off loading the file that defines it.  The first call
    to the function automatically loads the proper library, in order to
    install the real definition and other associated code, then runs the
    real definition as if it had been loaded all along.

***** Require

      #+BEGIN_SRC emacs-lisp

      (require 'loaddefs)

      #+END_SRC

*** Gargabge Collection

    To reduce startup time, we up the gargabage collector's threshold
    to temporarily prevent it from running, then reset it later by
    enabling `gcmh-mode'. Not resetting it will cause
    stuttering/freezes.

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; threshold inital value
     ;; (gc-cons-percentage 0.5)
     (setq gc-cons-threshold most-positive-fixnum) ; 2^61 bytes

     #+END_SRC

**** Hooks
*** Defines

    =aliases=, =variables=, =keymaps= and =binds=.

**** Aliases

     Define some aliases to improve quality of life.

     #+BEGIN_SRC emacs-lisp

     ;; yes or no
     (defalias 'yes-or-no-p 'y-or-n-p)

     #+END_SRC

**** Variables

     Save =file-name-handle-alist=, it will be used to restore
     its original value.

     #+BEGIN_SRC emacs-lisp

     (defvar saved-file-name-handler-alist
       file-name-handler-alist
       "Save `file-name-handler-alist' variable")

     #+END_SRC

**** Keymaps

     The goal here is to create a standard for commands' (functions)
     access sequences - keybinds or chords.

     For each of the most commonly used commads, a prefix map is
     created and inserted int the Ctl-x-map prefix.

     It's the author's preference to have a small set of keybinds, so
     most of the existing ones will be cleaned up.

     #+BEGIN_SRC emacs-lisp

     (defvar seconf-window-map
       (make-sparse-keymap)
       "Window commands keymap.")

     (defvar seconf-tags-map
       (make-sparse-keymap)
       "Tags (navigation) commands keymap.")

     (defvar seconf-pm-map
       (make-sparse-keymap)
       "Project management commands keymap.")

     (defvar seconf-sc-map
       (make-sparse-keymap)
       "Syntax check commands keymap.")

     (defvar seconf-completion-map
       (make-sparse-keymap)
       "Completion commands keymap.")

     (defvar seconf-docs-map
       (make-sparse-keymap)
       "Docs commands keymap.")

     (defvar seconf-files-map
       (make-sparse-keymap)
       "Files commands keymap.")

     (defvar seconf-debug-map
       (make-sparse-keymap)
       "Debug commands keymap.")

     (defvar seconf-filter-map
       (make-sparse-keymap)
       "Filter commands keymap.")

     (defvar seconf-utils-map
       (make-sparse-keymap)
       "Utils commands keymap.")

     (defvar seconf-rtags-map
       (make-sparse-keymap)
       "Rtag commands keymap.")

     #+END_SRC

     Define maps as prefix commands, this prepares
     =keymaps= for use as a prefix key's binding.

     #+BEGIN_SRC emacs-lisp

     (dolist (prefix-map '(seconf-tags-map
                           seconf-pm-map
                           seconf-sc-map
                           seconf-docs-map
                           seconf-files-map
                           seconf-filter-map
                           seconf-utils-map
                           seconf-window-map
                           seconf-completion-map
                           seconf-rtags-map))
       (define-prefix-command prefix-map))

     #+END_SRC

**** Binds

     Bind all newly created prefix maps to ctl-x-map

     #+BEGIN_SRC emacs-lisp

     ;; seconf prefix maps
     (define-key ctl-x-map (kbd "f") 'seconf-files-map) ;; files
     ;; (define-key ctl-x-map (kbd "") 'seconf-filter-map)
     (define-key ctl-x-map (kbd "p") 'seconf-pm-map) ; project
     (define-key ctl-x-map (kbd "t") 'seconf-tags-map) ; tags
     (define-key ctl-x-map (kbd "c") 'seconf-utils-map) ; commands
     (define-key ctl-x-map (kbd "e") 'seconf-sc-map) ; errors
     (define-key ctl-x-map (kbd "l") 'seconf-docs-map) ; library
     (define-key ctl-x-map (kbd "<tab>") 'seconf-completion-map) ; tab - complete

     #+END_SRC

*** Defer

    Reduce up startup time.

**** Clean

     #+BEGIN_SRC emacs-lisp

     ;; clean file-name-handler-alist
     (setq file-name-handler-alist nil)

     #+END_SRC

**** Hooks

     #+BEGIN_SRC emacs-lisp

     ;; restore file-name-handler-alist
     (add-hook 'emacs-startup-hook
               (lambda ()
                 (setq file-name-handler-alist
                       saved-file-name-handler-alist)))

     #+END_SRC

*** Startup
**** Customize

     This file parses the command line and gets Emacs running.

     #+BEGIN_SRC emacs-lisp

     ;; non-nil inhibits the startup screen
     ;; this variable is an alias for `inhibit-startup-screen'
     (customize-set-variable 'inhibit-startup-message t)

     ;; non-nil inhibits the initial startup echo area message
     (customize-set-variable 'inhibit-startup-echo-area-message nil)

     #+END_SRC

*** Warnings

    Implements the entry points `warn', `lwarn' and `display-warning'.

**** Require

     #+BEGIN_SRC emacs-lisp

     ;; (require 'warnings nil t)

     #+END_SRC

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; minimum severity level for displaying the warning buffer
     (customize-set-variable 'warning-minimum-level :error)

     ;; minimum severity level for logging a warning.
     (customize-set-variable 'warning-minimum-log-level :warning)

     #+END_SRC

*** Load-path

    Info Section: Emacs Lisp > Loading > Library Search

    When Emacs loads a Lisp library, it searches for the library in a list
    of directories specified by the variable `load-path'.

    If the environment variable =EMACSLOADPATH= is set, it modifies the
    above initialization procedure. Emacs initializes `load-path' based on
    the value of the environment variable.

    The syntax of =EMACSLOADPATH= is the same as used for 'PATH';
    directories are separated by ':' (or ';', on some operating systems).
    Here is an example of how to set =EMACSLOADPATH= variable (from a
    'sh'-style shell).

    #+BEGIN_SRC sh

    export EMACSLOADPATH=$EMACSLOADPATH:~/.emacs.d/lisp:~/.emacs.d/site-lisp

    #+END_SRC

    For each directory in `load-path', Emacs then checks to see if it
    contains a file `subdirs.el', and if so, loads it. The `subdirs.el'
    file is created when Emacs is built/installed, and contains code that
    causes Emacs to add any subdirectories of those directories to
    `load-path'. Both immediate subdirectories and subdirectories multiple
    levels down are added. But it excludes subdirectories whose names do
    not start with a letter or digit, and subdirectories named 'RCS' or
    'CVS', and subdirectories containing a file named =.nosearch=.

*** Load-prefer

    In noninteractive sessions, prioritize non-byte-compiled source files to
    prevent the use of stale byte-code to a little time in I/O operations.

    #+BEGIN_SRC emacs-lisp

    (setq load-prefer-newer noninteractive)

    #+END_SRC

** Libraries
*** Loaddefs

    The local ~lisp-loaddefs.el~ was generated by
    =update-directory-autoloads=, using the ~/emacs.d/lisp~
    directory as its base.

    Update/Generate =autoload= definitions for Lisp files in the directories.
    In an interactive call, you must give one argument, the name of a
    single directory. In a call from Lisp, you can supply multiple
    directories as separate arguments.

    #+BEGIN_SRC emacs-lisp

    ;; generated by `update-directory-autolods'
    (require 'lisp-loaddefs nil t)

    #+END_SRC

*** Garbage Collection

    Enforce a sneaky Garbage Collection strategy to minimize GC
    interference with the activity. During normal use a high GC
    threshold is set. When idling GC is immediately triggered
    and a low threshold is set.

**** Require

     #+BEGIN_SRC emacs-lisp

     ;; (require 'gcmh nil t)

     #+END_SRC

**** Hooks

     #+BEGIN_SRC emacs-lisp

     (add-hook 'window-setup-hook
               (lambda ()
                 (funcall 'gcmh-mode 1)))

     #+END_SRC

*** Basics
**** Macros

     #+BEGIN_SRC emacs-lisp

     (defmacro safe-load-file (file)
       "Load FILE if exists."
       `(if (not (file-exists-p ,file))
            (message "File not found")
          (load (expand-file-name ,file) t nil nil)))

     (defmacro safe-add-dirs-to-load-path (dirs)
       "Add DIRS (directories) to `load-path'."
       `(dolist (dir ,dirs)
          (setq dir (expand-file-name dir))
          (when (file-directory-p dir)
            (unless (member dir load-path)
              (push dir load-path)))))

     (defmacro safe-funcall (func &rest args)
       "Call FUNC with ARGS, if it's bounded."
       `(when (fboundp ,func)
          (funcall ,func ,@args)))

     (defmacro safe-mkdir (dir)
       "Create DIR in the file system."
       `(when (and (not (file-exists-p ,dir))
                   (make-directory ,dir :parents))))

     #+END_SRC

**** Simple

     A grab-bag of basic Emacs commands not specifically related to
     some major mode or to file-handling.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'simple nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; don't omit information when lists nest too deep
      (customize-set-variable 'eval-expression-print-level nil)

      ;; what to do when the output buffer is used by another shell command
      (customize-set-variable 'async-shell-command-buffer 'rename-buffer)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; column number display in the mode line
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'column-number-mode 1)))

      ;; buffer size display in the mode line
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'size-indication-mode 1)))

      #+END_SRC

**** Lex
***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'lex nil t)

      #+END_SRC

***** Binds

      Fundamental/core binds.

      #+BEGIN_SRC emacs-lisp

      ;; line movement
      (global-set-key (kbd "C-a") 'back-to-indent-or-line)
      (global-set-key (kbd "C-e") 'move-end-of-line)

      ;; word movement
      (global-set-key (kbd "C-<left>") 'backward-word)
      (global-set-key (kbd "C-<right>") 'forward-whitespace)

      ;; scroll movement
      (global-set-key (kbd "C-M-v") 'scroll-other-window)
      (global-set-key (kbd "C-M-y") 'scroll-other-window-down)

      ;; edit
      (global-set-key (kbd "M-y") 'browse-kill-ring)
      (global-set-key (kbd "M-i") 'indent-region-or-buffer)
      (global-set-key (kbd "M-j") 'duplicate-line-or-region)
      (global-set-key (kbd "M-n") 'transpose-lines-up)
      (global-set-key (kbd "M-p") 'transpose-lines-down)
      (global-set-key (kbd "M-l") 'downcase-word)
      (global-set-key (kbd "C-w") 'kill-region-or-backward-word)

      ;; kill
      (define-key ctl-x-map (kbd "k") 'kill-buffer)

      ;; mark
      (define-key seconf-utils-map (kbd "h") 'mark-whole-buffer)
      (define-key seconf-utils-map (kbd "s") 'mark-sexp)
      (define-key seconf-utils-map (kbd "p") 'mark-paragraph)
      (define-key seconf-utils-map (kbd "w") 'mark-word)

      ;; keyboard quit
      (global-set-key (kbd "M-ESC") 'keyboard-escape-quit)

      ;; in buffer completion
      ;; (global-set-key (kbd "C-M-i") 'complete-or-indent)

      #+END_SRC

*** Misc
**** Customize

     Customized settings.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'custom nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; file used for storing customization information.
      ;; The default is nil, which means to use your init file
      ;; as specified by ‘user-init-file’.  If the value is not nil,
      ;; it should be an absolute file name.
      (customize-set-variable
       'custom-file (concat (expand-file-name user-emacs-directory) "custom.el"))

      #+END_SRC
