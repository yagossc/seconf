#+TITLE: Emacs Configuration File
#+AUTHOR: yago
#+DESCRIPTION: An Org based Emacs configuration.
#+KEYWORDS: emacs, org, config, init.el
#+LANGUAGE: en
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* INIT

  In the beginning...

** Bootstrap
*** Header

	Define the package header as a "head-up" and avoid warnings.

	#+BEGIN_SRC emacs-lisp

	;;; Package --- Emacs configuration (init.el)
	;;; Commentary: try things out
	;;; Code:

	#+END_SRC

*** Lexical

	Lexical binding opens up many more opportunities
	for optimization, so programs using it are likely to run
	faster in future Emacs versions.

	Lexical binding is also more compatible with concurrency,
	which was added to Emacs in version 26.1.

	#+BEGIN_SRC emacs-lisp

	;;; -*- lexical-binding: t -*-

	#+END_SRC

*** Verify
**** Version

	 Verify emacs version.

	 #+BEGIN_SRC emacs-lisp

	 (when (version< emacs-version "26.3")
	   (error "This requires Emacs 26.3 and above!"))

	 #+END_SRC

*** Loaddefs

	Emacs Lisp > Loading > Autoload

	The "autoload" facility lets you register the existence of a function
	or macro, but put off loading the file that defines it.  The first call
	to the function automatically loads the proper library, in order to
	install the real definition and other associated code, then runs the
	real definition as if it had been loaded all along.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  (require 'loaddefs)

	  #+END_SRC

*** Gargabge Collection

	To reduce startup time, we up the gargabage collector's threshold
	to temporarily prevent it from running, then reset it later by
	enabling `gcmh-mode'. Not resetting it will cause
	stuttering/freezes.

**** Customize

	 #+BEGIN_SRC emacs-lisp

	 ;; threshold inital value
	 ;; (gc-cons-percentage 0.5)
	 (setq gc-cons-threshold most-positive-fixnum) ; 2^61 bytes

	 #+END_SRC

**** Hooks
*** Defines

	=aliases=, =variables=, =keymaps= and =binds=.

**** Aliases

	 Define some aliases to improve quality of life.

	 #+BEGIN_SRC emacs-lisp

	 ;; yes or no
	 (defalias 'yes-or-no-p 'y-or-n-p)

	 #+END_SRC

**** Variables

	 Save =file-name-handle-alist=, it will be used to restore
	 its original value.

	 #+BEGIN_SRC emacs-lisp

	 (defvar saved-file-name-handler-alist
	   file-name-handler-alist
	   "Save `file-name-handler-alist' variable")

	 #+END_SRC

**** Keymaps

	 The goal here is to create a standard for commands' (functions)
	 access sequences - keybinds or chords.

	 For each of the most commonly used commads, a prefix map is
	 created and inserted int the Ctl-x-map prefix.

	 It's the author's preference to have a small set of keybinds, so
	 most of the existing ones will be cleaned up.

	 #+BEGIN_SRC emacs-lisp

	 (defvar seconf-window-map
	   (make-sparse-keymap)
	   "Window commands keymap.")

	 (defvar seconf-tags-map
	   (make-sparse-keymap)
	   "Tags (navigation) commands keymap.")

	 (defvar seconf-pm-map
	   (make-sparse-keymap)
	   "Project management commands keymap.")

	 (defvar seconf-sc-map
	   (make-sparse-keymap)
	   "Syntax check commands keymap.")

	 (defvar seconf-completion-map
	   (make-sparse-keymap)
	   "Completion commands keymap.")

	 (defvar seconf-docs-map
	   (make-sparse-keymap)
	   "Docs commands keymap.")

	 (defvar seconf-files-map
	   (make-sparse-keymap)
	   "Files commands keymap.")

	 (defvar seconf-debug-map
	   (make-sparse-keymap)
	   "Debug commands keymap.")

	 (defvar seconf-filter-map
	   (make-sparse-keymap)
	   "Filter commands keymap.")

	 (defvar seconf-utils-map
	   (make-sparse-keymap)
	   "Utils commands keymap.")

	 (defvar seconf-rtags-map
	   (make-sparse-keymap)
	   "Rtag commands keymap.")

	 #+END_SRC

	 Define maps as prefix commands, this prepares
	 =keymaps= for use as a prefix key's binding.

	 #+BEGIN_SRC emacs-lisp

	 (dolist (prefix-map '(seconf-tags-map
						   seconf-pm-map
						   seconf-sc-map
						   seconf-docs-map
						   seconf-files-map
						   seconf-utils-map
						   seconf-window-map
						   seconf-completion-map
						   seconf-rtags-map))
	   (define-prefix-command prefix-map))

	 #+END_SRC

**** Binds

	 Bind all newly created prefix maps to ctl-x-map

	 #+BEGIN_SRC emacs-lisp

	 ;; seconf prefix maps
	 (define-key ctl-x-map (kbd "f") 'seconf-files-map) ;; files
	 (define-key ctl-x-map (kbd "p") 'seconf-pm-map) ; project
	 (define-key ctl-x-map (kbd "t") 'seconf-tags-map) ; tags
	 (define-key ctl-x-map (kbd "c") 'seconf-utils-map) ; commands
	 (define-key ctl-x-map (kbd "e") 'seconf-sc-map) ; errors
	 (define-key ctl-x-map (kbd "l") 'seconf-docs-map) ; library
	 (define-key ctl-x-map (kbd "w") 'seconf-window-map) ; window
	 (define-key ctl-x-map (kbd "<tab>") 'seconf-completion-map) ; tab - complete

	 #+END_SRC

*** Defer

	Reduce up startup time.

**** Clean

	 #+BEGIN_SRC emacs-lisp

	 ;; clean file-name-handler-alist
	 (setq file-name-handler-alist nil)

	 #+END_SRC

**** Hooks

	 #+BEGIN_SRC emacs-lisp

	 ;; restore file-name-handler-alist
	 (add-hook 'emacs-startup-hook
			   (lambda ()
				 (setq file-name-handler-alist
					   saved-file-name-handler-alist)))

	 #+END_SRC

*** Startup
**** Customize

	 This file parses the command line and gets Emacs running.

	 #+BEGIN_SRC emacs-lisp

	 ;; non-nil inhibits the startup screen
	 ;; this variable is an alias for `inhibit-startup-screen'
	 (customize-set-variable 'inhibit-startup-message t)

	 ;; non-nil inhibits the initial startup echo area message
	 (customize-set-variable 'inhibit-startup-echo-area-message nil)

	 #+END_SRC

*** Warnings

	Implements the entry points `warn', `lwarn' and `display-warning'.

**** Require

	 #+BEGIN_SRC emacs-lisp

	 ;; (require 'warnings nil t)

	 #+END_SRC

**** Customize

	 #+BEGIN_SRC emacs-lisp

	 ;; minimum severity level for displaying the warning buffer
	 (customize-set-variable 'warning-minimum-level :error)

	 ;; minimum severity level for logging a warning.
	 (customize-set-variable 'warning-minimum-log-level :warning)

	 #+END_SRC

*** Load-path

	Info Section: Emacs Lisp > Loading > Library Search

	When Emacs loads a Lisp library, it searches for the library in a list
	of directories specified by the variable `load-path'.

	If the environment variable =EMACSLOADPATH= is set, it modifies the
	above initialization procedure. Emacs initializes `load-path' based on
	the value of the environment variable.

	The syntax of =EMACSLOADPATH= is the same as used for 'PATH';
	directories are separated by ':' (or ';', on some operating systems).
	Here is an example of how to set =EMACSLOADPATH= variable (from a
	'sh'-style shell).

	#+BEGIN_SRC sh

	export EMACSLOADPATH=$EMACSLOADPATH:~/.emacs.d/lisp:~/.emacs.d/site-lisp

	#+END_SRC

	For each directory in `load-path', Emacs then checks to see if it
	contains a file `subdirs.el', and if so, loads it. The `subdirs.el'
	file is created when Emacs is built/installed, and contains code that
	causes Emacs to add any subdirectories of those directories to
	`load-path'. Both immediate subdirectories and subdirectories multiple
	levels down are added. But it excludes subdirectories whose names do
	not start with a letter or digit, and subdirectories named 'RCS' or
	'CVS', and subdirectories containing a file named =.nosearch=.

*** Load-prefer

	In noninteractive sessions, prioritize non-byte-compiled source files to
	prevent the use of stale byte-code to a little time in I/O operations.

	#+BEGIN_SRC emacs-lisp

	(setq load-prefer-newer noninteractive)

	#+END_SRC

** Libraries
*** Loaddefs

	The local ~lisp-loaddefs.el~ was generated by
	=update-directory-autoloads=, using the ~/emacs.d/lisp~
	directory as its base.

	Update/Generate =autoload= definitions for Lisp files in the directories.
	In an interactive call, you must give one argument, the name of a
	single directory. In a call from Lisp, you can supply multiple
	directories as separate arguments.

	#+BEGIN_SRC emacs-lisp

	;; generated by `update-directory-autolods'
	(require 'lisp-loaddefs nil t)

	#+END_SRC

*** Garbage Collection

	Enforce a sneaky Garbage Collection strategy to minimize GC
	interference with the activity. During normal use a high GC
	threshold is set. When idling GC is immediately triggered
	and a low threshold is set.

**** Require

	 #+BEGIN_SRC emacs-lisp

	 ;; (require 'gcmh nil t)

	 #+END_SRC

**** Hooks

	 #+BEGIN_SRC emacs-lisp

	 (add-hook 'window-setup-hook
			   (lambda ()
				 (funcall 'gcmh-mode 1)))

	 #+END_SRC

*** Basics
**** Macros

	 #+BEGIN_SRC emacs-lisp

	 (defmacro safe-load-file (file)
	   "Load FILE if exists."
	   `(if (not (file-exists-p ,file))
			(message "File not found")
		  (load (expand-file-name ,file) t nil nil)))

	 (defmacro safe-add-dirs-to-load-path (dirs)
	   "Add DIRS (directories) to `load-path'."
	   `(dolist (dir ,dirs)
		  (setq dir (expand-file-name dir))
		  (when (file-directory-p dir)
			(unless (member dir load-path)
			  (push dir load-path)))))

	 (defmacro safe-funcall (func &rest args)
	   "Call FUNC with ARGS, if it's bounded."
	   `(when (fboundp ,func)
		  (funcall ,func ,@args)))

	 (defmacro safe-mkdir (dir)
	   "Create DIR in the file system."
	   `(when (and (not (file-exists-p ,dir))
				   (make-directory ,dir :parents))))

	 #+END_SRC

**** Simple

	 A grab-bag of basic Emacs commands not specifically related to
	 some major mode or to file-handling.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'simple nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; don't omit information when lists nest too deep
	  (customize-set-variable 'eval-expression-print-level nil)

	  ;; what to do when the output buffer is used by another shell command
	  (customize-set-variable 'async-shell-command-buffer 'rename-buffer)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; column number display in the mode line
	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'column-number-mode 1)))

	  ;; buffer size display in the mode line
	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'size-indication-mode 1)))

	  #+END_SRC

**** Lex
***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'lex nil t)

	  #+END_SRC

***** Binds

	  Fundamental/core binds.

	  #+BEGIN_SRC emacs-lisp

	  ;; line movement
	  (global-set-key (kbd "C-a") 'back-to-indent-or-line)
	  (global-set-key (kbd "C-e") 'move-end-of-line)

	  ;; word movement
	  (global-set-key (kbd "C-<left>") 'backward-word)
	  (global-set-key (kbd "C-<right>") 'forward-whitespace)

	  ;; scroll movement
	  (global-set-key (kbd "C-M-v") 'scroll-other-window)
	  (global-set-key (kbd "C-M-y") 'scroll-other-window-down)

	  ;; edit
	  (global-set-key (kbd "M-y") 'browse-kill-ring)
	  (global-set-key (kbd "M-i") 'indent-region-or-buffer)
	  (global-set-key (kbd "M-j") 'duplicate-line-or-region)
	  (global-set-key (kbd "M-n") 'transpose-lines-up)
	  (global-set-key (kbd "M-p") 'transpose-lines-down)
	  (global-set-key (kbd "M-l") 'downcase-word)
	  (global-set-key (kbd "C-w") 'kill-region-or-backward-word)

	  ;; kill
	  (define-key ctl-x-map (kbd "k") 'kill-buffer)

	  ;; mark
	  (define-key seconf-utils-map (kbd "h") 'mark-whole-buffer)
	  (define-key seconf-utils-map (kbd "s") 'mark-sexp)
	  (define-key seconf-utils-map (kbd "p") 'mark-paragraph)
	  (define-key seconf-utils-map (kbd "w") 'mark-word)

	  ;; keyboard quit
	  (global-set-key (kbd "M-ESC") 'keyboard-escape-quit)

	  ;; in buffer completion
	  ;; (global-set-key (kbd "C-M-i") 'complete-or-indent)

	  #+END_SRC

*** Misc
**** Customize

	 Customized settings.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'custom nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; file used for storing customization information.
	  ;; The default is nil, which means to use your init file
	  ;; as specified by ‘user-init-file’.  If the value is not nil,
	  ;; it should be an absolute file name.
	  (customize-set-variable
	   'custom-file (concat (expand-file-name user-emacs-directory) "custom.el"))

	  #+END_SRC

** Emacs Vanilla

   Major Structures of Emacs: Files, Buffer, Windows, Frames, Input,
   International, Commands, Completions, Editing ...

   The aim is the 'C' (core) system.

*** File operations

	Operation over files, as in computer resource for recording data
	discretely in a storage device.

**** Files

	 Defines most of Emacs's file- and directory-handling functions,
	 including basic file visiting, backup generation, link handling,
	 ITS-id version control, load- and write-hook handling, and the like.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'files nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; control use of version numbers for backup files.
	  (customize-set-variable 'version-control t)

	  ;; non-nil means always use copying to create backup files
	  (customize-set-variable 'backup-by-copying t)

	  ;; number of newest versions to keep when a new numbered backup is made
	  (customize-set-variable 'kept-new-versions 6)

	  ;; number of oldest versions to keep when a new numbered backup is made
	  (customize-set-variable 'kept-old-versions 2)

	  ;; if t, delete excess backup versions silently
	  (customize-set-variable 'delete-old-versions t)

	  ;; non-nil means make a backup of a file the first time it is saved
	  (customize-set-variable 'make-backup-files nil)

	  ;; non-nil says by default do auto-saving of every file-visiting buffer
	  (customize-set-variable 'auto-save-default nil)

	  ;; most *NIX tools work best when files are terminated
	  ;; with a newline
	  (customize-set-variable 'require-final-newline t)

	  ;; backup directory list
	  ;; alist of filename patterns and backup directory names
	  (customize-set-variable 'backup-directory-alist '(("" . "~/.emacs.d/backup")))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  ;; create cache directory, if necessary
	  ;; (add-hook 'window-setup-hook
	  ;; (lambda ()
	  ;; (mkdir (concat user-emacs-directory "cache"))))

	  #+END_SRC

**** Find-file-at-point

	 Command find-file-at-point.
	 With a prefix, it behaves exactly like find-file.
	 Without a prefix, it first tries to guess a default file or URL
	 from the text around the point.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'ffap nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; seconf-files-map
	  (define-key seconf-files-map (kbd "f") 'find-file-at-point)
	  (define-key seconf-files-map (kbd "d") 'dired-at-point)
	  (define-key seconf-files-map (kbd "C-d") 'ffap-list-directory)

	  #+END_SRC

**** Locate

	 Locate.el provides an interface to a program which searches a
	 database of file names. By default, this program is the GNU locate
	 command, but it could also be the BSD-style find command, or even a
	 user specified command.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'locate nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key seconf-files-map (kbd "l") 'locate)

	  #+END_SRC

**** Recentf

	 The recent files list is automatically saved across Emacs
	 sessions. You can customize the number of recent files displayed,
	 the location of the menu and others options (see the source code
	 for details).


***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'recentf nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; file to save the recent list into.
	  (customize-set-variable
	   'recentf-save-file (concat user-emacs-directory "cache/recentf"))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; seconf-files-map
	  (define-key seconf-files-map (kbd "r") 'recentf-open-files)
	  (define-key seconf-files-map (kbd "t") 'recentf-find-file)

	  #+END_SRC

**** Diff

	 This package helps you explore differences between files, using the
	 UNIX command diff(1). The commands are `diff' and `diff-backup'.
	 You can specify options with `diff-switches'.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'diff nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; a string or list of strings specifying switches to be passed to diff
	  (customize-set-variable 'diff-switches "-u")

	  #+END_SRC

**** Ediff

	 This package provides a convenient way of simultaneous browsing through
	 the differences between a pair (or a triple) of files or buffers.
	 The files being compared, file-A, file-B, and file-C (if applicable) are
	 shown in separate windows (side by side, one above the another, or in
	 separate frames), and the differences are highlighted as you step
	 through them.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'ediff nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; options to pass to `ediff-custom-diff-program'.
	  (customize-set-variable 'ediff-custom-diff-options "-U3")

	  ;; the function used to split the main window between buffer-A and buffer-B
	  (customize-set-variable 'ediff-split-window-function 'split-window-horizontally)

	  ;; function called to set up windows
	  (customize-set-variable 'ediff-window-setup-function 'ediff-setup-windows-plain)

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'ediff-startup-hook 'ediff-toggle-wide-display)
	  (add-hook 'ediff-cleanup-hook 'ediff-toggle-wide-display)
	  (add-hook 'ediff-suspend-hook 'ediff-toggle-wide-display)

	  #+END_SRC

**** Dired

	 This is a major mode for file management operations.

	 The most common operations performed on files or groups of files
	 include creating, opening (e.g. viewing, playing, editing or
	 printing), renaming, moving or copying, deleting and searching
	 for files, as well as modifying file attributes, properties and
	 file permissions.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'dired nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; enable dired-find-alternate-file
	  (add-hook 'window-setup-hook
				(lambda ()
				  (put 'dired-find-alternate-file 'disabled nil)))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; dired-mode-map
	  (eval-after-load 'dired
		(lambda ()
		  (when (boundp 'dired-mode-map)
			(define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
			(define-key dired-mode-map (kbd "C-j") 'dired-find-alternate-file))))

	  #+END_SRC

*** Frames

	When Emacs is started on a graphical display, e.g., on the X Window
	System, it occupies a graphical system-level display region.  In this
	manual, we call this a “frame”, reserving the word “window” for the part
	of the frame used for displaying a buffer.

	- A frame initially contains one window, but it can be subdivided
	  into multiple windows

	Configure/customize frame related options:

**** Require

	 #+BEGIN_SRC emacs-lisp

	 ;; (require 'frame nil t)

	 #+END_SRC

**** Customize

	 #+BEGIN_SRC emacs-lisp

	 ;; with some window managers you may have to set this to non-nil
	 ;; in order to set the size of a frame in pixels, to maximize
	 ;; frames or to make them fullscreen.
	 (customize-set-variable 'frame-resize-pixelwise t)

	 ;; normalize before maximize
	 (customize-set-variable 'x-frame-normalize-before-maximize t)

	 ;; set frame title format
	 (customize-set-variable 'frame-title-format
							 '((:eval (if (buffer-file-name)
										  (abbreviate-file-name (buffer-file-name))
										"%b"))))

	 ;; alist of parameters for the initial X window frame
	 (add-to-list 'initial-frame-alist '(fullscreen . fullheight))

	 ;; alist of default values for frame creation
	 (add-to-list 'default-frame-alist '(internal-border-width . 2))

	 #+END_SRC

**** Hooks

	 #+BEGIN_SRC emacs-lisp

	 ;; set transparency after a frame is created
	 ;; (add-hook 'after-make-frame-functions
	 ;;           (lambda (frame)
	 ;;             (set-frame-transparency .8)))

	 #+END_SRC

**** Binds

	 #+BEGIN_SRC emacs-lisp

	 ;; global map
	 (global-set-key (kbd "C-x C-o") 'other-frame)

	 #+END_SRC

**** Macros

	 #+BEGIN_SRC emacs-lisp

	 (defmacro safe-set-frame-font (font)
	   "Set the default font to FONT."
	   `(cond ((find-font (font-spec :name ,font))
			   (set-frame-font ,font nil t))))

	 #+END_SRC

**** Enable

	 #+BEGIN_SRC emacs-lisp

	 ;; set default font
	 (add-hook 'window-setup-hook
			   (lambda ()
				 (safe-set-frame-font "Iosevka Fixed-14:width=regular:weight=regular")))

	 ;; enable window divider
	 (add-hook 'window-setup-hook
			   (lambda ()
				 (funcall 'window-divider-mode)))

	 ;; disable blink cursor
	 (add-hook 'window-setup-hook
			   (lambda ()
				 (funcall 'blink-cursor-mode 1)))

	 #+END_SRC

*** Windows
**** Window

	 Emacs windows system.

	 Characteristics:

	 - Each Emacs window displays one Emacs buffer at any time.
	 - A single buffer may appear in more than one window.
	 - Emacs can split a frame into two or many windows.
	 - Multiple frames always imply multiple windows, because each
	   frame has its own set of windows.
	 - Each window belongs to one and only one frame.

	 Configure/customize windows standard/basic options,
	 the description of each one can be found on the
	 commentaries.

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; scroll options
	  ;; number of lines of margin at the top and bottom of a window
	  (customize-set-variable 'scroll-margin 0)

	  ;; scroll up to this many lines, to bring point back on screen
	  (customize-set-variable 'scroll-conservatively 100)

	  ;; t means point keeps its screen position
	  (customize-set-variable 'scroll-preserve-screen-position t)

	  ;; non-nil means mouse commands use dialog boxes to ask questions
	  (customize-set-variable 'use-dialog-box nil)

	  ;; set window margins
	  ;; width in columns of left marginal area for display of a buffer
	  (customize-set-variable 'left-margin-width 1)

	  ;; width in columns of right marginal area for display of a buffer.
	  (customize-set-variable 'right-margin-width 1)

	  ;; if t, resize window combinations proportionally
	  (customize-set-variable 'window-combination-resize t)

	  ;; if non-nil ‘display-buffer’ will try to even window sizes
	  (customize-set-variable 'even-window-sizes t)

	  ;; if non-nil, left and right side windows occupy full frame height
	  (customize-set-variable 'window-sides-vertical nil)

	  ;; non-nil value means always make a separate frame
	  ;; (customize-set-variable 'pop-up-frames nil)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; binds (global)
	  (global-set-key (kbd "s-l") 'shrink-window-horizontally)
	  (global-set-key (kbd "s-h") 'enlarge-window-horizontally)
	  (global-set-key (kbd "s-j") 'shrink-window)
	  (global-set-key (kbd "s-k") 'enlarge-window)

	  ;; next and previous buffer (on current window)
	  (define-key ctl-x-map (kbd "C-,") 'previous-buffer)
	  (define-key ctl-x-map (kbd "C-.") 'next-buffer)

	  ;; binds (seconf-window prefix map)
	  (define-key seconf-window-map (kbd "1") 'maximize-window)
	  (define-key seconf-window-map (kbd "q") 'minimize-window)
	  (define-key seconf-window-map (kbd "w") 'balance-windows)

	  ;; switch to buffer
	  (define-key ctl-x-map (kbd "C-b") 'switch-to-buffer)

	  ;; kill buffer and window
	  (define-key ctl-x-map (kbd "C-k") 'kill-buffer-and-window)

	  ;; switch to the last buffer in the buffer list
	  (define-key ctl-x-map (kbd "C-u") 'unbury-buffer)

	  #+END_SRC

***** Display

	  In its most simplistic form, a frame accommodates always
	  one single window that can be used for displaying a buffer.
	  As a consequence, it is always the latest call of display-buffer
	  that will have succeeded in placing its buffer there.

	  #+BEGIN_SRC emacs-lisp

	  #+END_SRC

**** Windmove

	 This package defines a set of routines, windmove-{left,up,right,
	 down}, for selection of windows in a frame geometrically.
	 For example, `windmove-right' selects the window immediately to the
	 right of the currently-selected one.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'windmove nil t)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; window move default keybinds (shift-up/down etc..)
	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'windmove-default-keybindings)))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key seconf-window-map (kbd "i") 'windmove-up)
	  (define-key seconf-window-map (kbd "k") 'windmove-down)
	  (define-key seconf-window-map (kbd "j") 'windmove-left)
	  (define-key seconf-window-map (kbd "l") 'windmove-right)

	  #+END_SRC

**** Page

	 This package provides the page-oriented movement and
	 selection commands documented in the Emacs manual.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'page nil t)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; enable narrow functions
	  (add-hook 'window-setup-hook
				(lambda ()
				  (put 'narrow-to-page 'disabled nil)
				  (put 'narrow-to-region 'disabled nil)))

	  #+END_SRC

*** Buffers
**** Customize

	 #+BEGIN_SRC emacs-lisp

	 ;; non-nil means do not display continuation lines.
	 (customize-set-variable 'truncate-lines nil)

	 ;; sentences should be separated by a single space,
	 ;; so treat two sentences as two when filling
	 (customize-set-variable 'sentence-end-double-space nil)

	 ;; kill process not confirmation required
	 ;; list of functions called with no args to query before killing a buffer.
	 ;; The buffer being killed will be current while the functions are running.
	 (customize-set-variable
	  'kill-buffer-query-functions
	  (remq 'process-kill-buffer-query-function kill-buffer-query-functions))

	 ;; non-nil means load prefers the newest version of a file.
	 (customize-set-variable 'load-prefer-newer t)

	 ;; enable: (erase-buffer)
	 ;; Delete the entire contents of the current buffer.
	 (add-hook 'window-setup-hook
			   (lambda ()
				 (put 'erase-buffer 'disabled nil)))

	 #+END_SRC

**** Display
***** Hl-line

	  Provides a local minor mode (toggled by M-x hl-line-mode) and
	  a global minor mode (toggled by M-x global-hl-line-mode) to
	  highlight, on a suitable terminal, the line on which point is.

****** Require

	   #+BEGIN_SRC emacs-lisp

	   ;; (require 'hl-line nil t)

	   #+END_SRC

****** Enable

	   #+BEGIN_SRC emacs-lisp

	   ;; enable highlight line
	   (add-hook 'window-setup-hook
				 (lambda ()
				   (funcall 'global-hl-line-mode 1)))

	   #+END_SRC

***** Linum

	  Display line numbers format to be display in the current buffer.

****** Require

	   #+BEGIN_SRC emacs-lisp

	   ;; (require 'linum nil t)

	   #+END_SRC

****** Customize

	   #+BEGIN_SRC emacs-lisp

	   ;; format used to display line numbers.
	   (customize-set-variable 'linum-format " %2d ")

	   #+END_SRC

***** Display-linum

	  Display line numbers in the buffer.
	  Provides a minor mode interface for `display-line-numbers'.

****** Require

	   #+BEGIN_SRC emacs-lisp

	   ;; (require 'display-line-numbers nil t)

	   #+END_SRC

****** Hooks

	   #+BEGIN_SRC emacs-lisp

	   (add-hook 'prog-mode-hook 'display-line-numbers-mode)

	   #+END_SRC

****** Enable

	   #+BEGIN_SRC emacs-lisp

	   ;; (safe-funcall 'global-display-line-numbers-mode 1)))

	   #+END_SRC

***** Cursor

	  On a text terminal, the cursor's appearance is controlled by the
	  terminal, largely out of the control of Emacs.
	  Some terminals offer two different cursors: a visible static
	  cursor, and a very visible blinking cursor.
	  By default, Emacs uses the very visible cursor, and switches
	  to it when you start or resume Emacs. If the variable
	  visible-cursor is nil when Emacs starts or resumes, it uses
	  the normal cursor.

****** Customize

	   #+BEGIN_SRC emacs-lisp

	   ;; non-nil means to make the cursor very visible
	   (customize-set-variable 'visible-cursor t)

	   #+END_SRC

*** Conding-System

	Emacs supports a wide variety of international character sets, including
	European and Vietnamese variants of the Latin alphabet, as well as
	Arabic scripts, Brahmic scripts (for languages such as Bengali, Hindi,
	and Thai), Cyrillic, Ethiopic, Georgian, Greek, Han (for Chinese and
	Japanese), Hangul (for Korean), Hebrew and IPA.  Emacs also supports
	various encodings of these characters that are used by other
	internationalized software, such as word processors and mailers.

	Configure/set coding-system (UTF8), everywhere!

**** Customize

	 #+BEGIN_SRC emacs-lisp

	 ;; coding system to use with system messages
	 (customize-set-variable 'locale-coding-system 'utf-8)

	 ;; coding system to be used for encoding the buffer contents on saving
	 (customize-set-variable 'buffer-file-coding-system 'utf-8)

	 ;; add coding-system at the front of the priority list for automatic detection
	 (prefer-coding-system 'utf-8)

	 ;; set coding system (UFT8)
	 (set-language-environment "UTF-8")
	 (set-terminal-coding-system 'utf-8)
	 (set-keyboard-coding-system 'utf-8)
	 (set-selection-coding-system 'utf-8)

	 #+END_SRC

*** Commands
**** History

	 Commands history.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'chistory nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; maximum length of history lists before truncation takes place
	  (customize-set-variable 'history-length 1024)

	  ;;list history of commands that used the minibuffer
	  (customize-set-variable 'list-command-history-max history-length)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; ctl-x-map
	  (define-key ctl-x-map (kbd "C-c") 'eval-command-history)

	  #+END_SRC

**** Minibuffer

	 The “minibuffer” is where Emacs commands read complicated arguments,
	 such as file names, buffer names, Emacs command names, or Lisp
	 expressions. We call it the `minibuffer' because it’s a special-purpose
	 buffer with a small amount of screen space. You can use the usual Emacs
	 editing commands in the minibuffer to edit the argument text.

	 When the minibuffer is in use, it appears in the echo area, with a
	 cursor. The minibuffer starts with a `prompt', usually ending with
	 a colon.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'minibuffer nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; non-nil means to allow minibuffer commands while in the minibuffer
	  (customize-set-variable 'enable-recursive-minibuffers nil)

	  ;; if non-nil, `read-answer' accepts single-character answers
	  (customize-set-variable 'read-answer-short t)

	  ;; non-nil means completion ignores case when reading a buffer name
	  (customize-set-variable 'read-buffer-completion-ignore-case t)

	  ;; non-nil means when reading a file name completion ignores case
	  (customize-set-variable 'read-file-name-completion-ignore-case t)

	  ;; number of completion candidates below which cycling is used
	  (customize-set-variable 'completion-cycle-threshold nil)

	  ;; treat the SPC or - inserted by `minibuffer-complete-word as delimiters
	  (customize-set-variable 'completion-pcm-complete-word-inserts-delimiters t)

	  ;; a string of characters treated as word delimiters for completion
	  ;; (customize-set-variable 'completion-pcm-word-delimiters "-_./:| ")

	  ;; non-nil means show help message in *Completions* buffer
	  (customize-set-variable 'completion-show-help nil)

	  ;; non-nil means automatically provide help for invalid completion input
	  (customize-set-variable 'completion-auto-help 'lazy)

	  ;; list of completion styles to use: see `completion-styles-alist variable
	  (customize-set-variable 'completion-styles
							  '(basic partial-completion emacs22 flex))
	  ;; '(basic partial-completion substring flex))

	  ;; list of category-specific user overrides for completion styles.
	  (customize-set-variable 'completion-category-overrides nil)
	  ;; '((file (styles initials basic))
	  ;;   (buffer (styles initials basic))
	  ;;   (info-menu (styles basic))))

	  ;; define the appearance and sorting of completions
	  (customize-set-variable 'completions-format 'horizontal)

	  ;; how to resize mini-windows (the minibuffer and the echo area)
	  ;; a value of t means resize them to fit the text displayed in them
	  (customize-set-variable 'resize-mini-windows nil)

	  ;; if non-nil, shorten "(default ...)" to "[...]" in minibuffer prompts
	  (customize-set-variable 'minibuffer-eldef-shorten-default t)

	  ;; non-nil means to delete duplicates in history
	  (customize-set-variable 'history-delete-duplicates t)

	  ;; special hook to find the completion table for the entity at point (default)
	  (customize-set-variable
	   'completion-at-point-functions
	   '(elisp-completion-at-point
		 lisp-completion-at-point
		 tags-completion-at-point-function t))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  ;; defer garbage collection
	  ;; set `gc-cons-threshold' to most-positive-fixnum
	  ;; the largest lisp integer value representation
	  (add-hook 'minibuffer-setup-hook
				(lambda ()
				  (setq gc-cons-threshold most-positive-fixnum)))

	  ;; reset threshold to inital value (16 megabytes)
	  (add-hook 'minibuffer-exit-hook
				(lambda () (run-at-time 1 nil
										(lambda ()
										  (setq gc-cons-threshold 16777216)))))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; minibuffer-local-map
	  (define-key minibuffer-local-map (kbd "M-`") 'minibuffer-completion-help)
	  (define-key minibuffer-local-map (kbd "<tab>") 'minibuffer-complete)
	  (define-key minibuffer-local-map (kbd "M-w") 'minibuffer-complete-word)
	  (define-key minibuffer-local-map (kbd "M-<tab>") 'goto-minibuffer-or-completions-window)

	  ;; goto-map
	  (define-key goto-map (kbd "M-SPC") 'goto-minibuffer-window)
	  (define-key goto-map (kbd "C-M-i") 'goto-completions-window)
	  ;; (define-key goto-map (kbd "M-v") 'goto-minibuffer-or-completions-window)
	  (define-key goto-map (kbd "M-m") 'goto-mark)

	  ;; clt-x-map quit minibuffer
	  (global-set-key (kbd "<C-delete>") 'quit-minibuffer)

	  ;; seconf-completion-map: completion-at-point (experimental)
	  (define-key seconf-completion-map (kbd "a") 'completion-at-point)

	  ;; global
	  (global-set-key (kbd "M-x") 'goto-minibuffer-or-call-it)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; if `file-name-shadow-mode' is active, any part of the
	  ;; minibuffer text that would be ignored because of this is given the
	  ;; properties in `file-name-shadow-properties', which may
	  ;; be used to make the ignored text invisible, dim, etc.
	  (add-hook 'window-setup-hook
				(lambda()
				  (funcall 'file-name-shadow-mode 1)))

	  ;; when active, any recursive use of the minibuffer will show
	  ;; the recursion depth in the minibuffer prompt, this is only
	  ;; useful if `enable-recursive-minibuffers' is non-nil
	  (add-hook 'window-setup-hook
				(lambda()
				  (funcall 'minibuffer-depth-indicate-mode -1)))

	  ;; when active, minibuffer prompts that show a default value only show
	  ;; the default when it's applicable
	  (add-hook 'window-setup-hook
				(lambda()
				  (funcall 'minibuffer-electric-default-mode 0)))

	  #+END_SRC

**** Savehist

	 Many editors (e.g. Vim) have the feature of saving minibuffer
	 history to an external file after exit.  This package provides the
	 same feature in Emacs.  When set up, it saves recorded minibuffer
	 histories to a file (`~/.emacs-history' by default).  Additional
	 variables may be specified by customizing
	 `savehist-additional-variables'.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'savehist nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; file name where minibuffer history is saved to and loaded from.
	  (customize-set-variable
	   'savehist-file (concat user-emacs-directory "cache/history"))

	  ;; if non-nil, save all recorded minibuffer histories.
	  (customize-set-variable 'savehist-save-minibuffer-history t)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; enable savehist mode
	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'savehist-mode 1)))

	  #+END_SRC

**** Completion

	 After you type a few characters, pressing the `complete'
	 key inserts the rest of the word you are likely to type.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'completion nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; custom
	  ;; how far to search in the buffer when looking for completions,
	  ;; if nil, search the whole buffer
	  (customize-set-variable 'completion-search-distance 12000)

	  ;; if non-nil, the next completion prompt does a cdabbrev search
	  (customize-set-variable 'completion-cdabbrev-prompt-flag t)

	  ;; non-nil means show help message in *Completions* buffer
	  (customize-set-variable 'completion-show-help nil)

	  ;; non-nil means separator characters mark previous word as used
	  (customize-set-variable 'completion-on-separator-characthfer t)

	  ;; the filename to save completions to.
	  (customize-set-variable
	   'save-completions-file-name
	   (expand-file-name "cache/completitions" user-emacs-directory))

	  ;; non-nil means save most-used completions when exiting emacs
	  (customize-set-variable 'save-completions-flag t)

	  ;; discard a completion if unused for this many hours.
	  ;; (1 day = 24, 1 week = 168)
	  ;; if this is 0, non-permanent completions
	  ;; will not be saved unless these are used
	  (customize-set-variable 'save-completions-retention-time 168)

	  #+END_SRC

***** Display

	  #+BEGIN_SRC emacs-lisp

	  (add-to-list 'display-buffer-alist
				   '("\\*Completions\\*"
					 (display-buffer-below-selected display-buffer-at-bottom)
					 (window-height . fit-window-to-buffer)))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; completion-list-mode-map
	  (define-key completion-list-mode-map (kbd "q") 'delete-completion-window)
	  (define-key completion-list-mode-map (kbd "d") 'delete-completion-line)
	  (define-key completion-list-mode-map (kbd "w") 'kill-ring-save)
	  (define-key completion-list-mode-map (kbd "RET") 'choose-completion)
	  (define-key completion-list-mode-map (kbd "TAB") 'next-completion)
	  (define-key completion-list-mode-map (kbd "DEL") 'previous-completion)
	  (define-key completion-list-mode-map (kbd "C-j") 'choose-completion)
	  (define-key completion-list-mode-map (kbd "C-g") 'quit-minibuffer)
	  (define-key completion-list-mode-map (kbd "M-<tab>") 'goto-minibuffer-or-completions-window)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; enable dynamic completion mode
	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'dynamic-completion-mode 1)))

	  #+END_SRC

**** Icomplete

	 This package implements a more fine-grained minibuffer
	 completion feedback scheme. Prospective completions are concisely
	 indicated within the minibuffer itself, with each successive
	 keystroke.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'icomplete nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; custom
	  ;; pending-completions number over which to apply `icomplete-compute-delay
	  (customize-set-variable 'icomplete-delay-completions-threshold 128)

	  ;; maximum number of initial chars to apply `icomplete-compute-delay
	  (customize-set-variable 'icomplete-max-delay-chars 0.3)

	  ;; completions-computation stall, used only with large-number completions
	  (customize-set-variable 'icomplete-compute-delay 0.1)

	  ;; when non-nil, show completions when first prompting for input
	  (customize-set-variable 'icomplete-show-matches-on-no-input t)

	  ;; when non-nil, hide common prefix from completion candidates
	  (customize-set-variable 'icomplete-hide-common-prefix nil)

	  ;; maximum number of lines to use in the minibuffer
	  (customize-set-variable 'icomplete-prospects-height 1)

	  ;; string used by Icomplete to separate alternatives in the minibuffer
	  (customize-set-variable 'icomplete-separator (propertize " · " 'face 'shadow))

	  ;; specialized completion tables with which `icomplete should operate,
	  ;; if this is t, `icomplete operates on all tables
	  (customize-set-variable 'icomplete-with-completion-tables t)

	  ;; if non-nil, also use icomplete when completing in non-mini buffers
	  (customize-set-variable 'icomplete-in-buffer nil)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (eval-after-load 'icomplete
		(lambda ()
		  (when (boundp 'icomplete-minibuffer-map)
			;; unbind
			(define-key icomplete-minibuffer-map (kbd "SPC") nil)

			;; bind
			(define-key icomplete-minibuffer-map (kbd "C-SPC") 'icomplete-force-complete-and-exit)
			(define-key icomplete-minibuffer-map (kbd "C-n") 'icomplete-forward-completions)
			(define-key icomplete-minibuffer-map (kbd "C-p") 'icomplete-backward-completions)
			(define-key icomplete-minibuffer-map (kbd "M-p") 'previous-line-or-history-element)
			(define-key icomplete-minibuffer-map (kbd "M-n") 'next-line-or-history-element)
			(define-key icomplete-minibuffer-map (kbd "M-i") 'minibuffer-insert-top-candidate)
			(define-key icomplete-minibuffer-map (kbd "M-k") 'minibuffer-kill-top-candidate)
			(define-key icomplete-minibuffer-map (kbd "M-h") 'minibuffer-describe-top-candidate))))

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; enable globally
	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'icomplete-mode 1)))

	  #+END_SRC

*** Screen

	On a graphical display, such as on GNU/Linux using the X Window System,
	Emacs occupies a graphical window.  On a text terminal, Emacs occupies
	the entire terminal screen. We will use the term `frame' to mean a
	graphical window or terminal screen occupied by Emacs. Emacs behaves
	very similarly on both kinds of frames. It normally starts out with
	just one frame, but you can create additional frames if you wish.

**** Tool-bar

	 Provides `tool-bar-mode' to control display of the tool-bar and
	 bindings for the global tool bar with convenience functions
	 `tool-bar-add-item' and `tool-bar-add-item-from-menu'.

	 Tool bar in all graphical frames disabled by default.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'tool-bar nil t)

	  #+END_SRC

***** Disable

	  #+BEGIN_SRC emacs-lisp

	  ;; disable
	  ;; (safe-funcall 'tool-bar-mode '0)

	  #+END_SRC

**** Tooltip

	 When this global minor mode is enabled, Emacs displays help
	 text (e.g. for buttons and menu items that you put the mouse on)
	 in a pop-up window.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'tooltip nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; seconds to wait before displaying a tooltip the first time.
	  (customize-set-variable 'tooltip-delay 0.2)

	  (customize-set-variable 'x-gtk-use-system-tooltips nil)

	  ;; frame parameters used for tooltips
	  ;; if ‘left’ or ‘top’ parameters are included, they specify the absolute
	  (customize-set-variable 'tooltip-frame-parameters
							  '((name . "tooltip")
								(internal-border-width . 0)
								(border-width . 0)
								(no-special-glyphs . t)))

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'tooltip-mode 1)))

	  #+END_SRC

**** Menu-bar

	 Each Emacs frame normally has a "menu bar" at the top which you can use
	 to perform common operations. There's no need to list them here, as you
	 can more easily see them yourself.

	 Disabled by default.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'menu-bar nil t)

	  #+END_SRC

***** Disable

	  #+BEGIN_SRC emacs-lisp

	  ;; (safe-funcall 'menu-bar-mode 0)

	  #+END_SRC

**** Scroll-bar

	 Specify whether to have vertical scroll bars, and on which side.
	 Disabled by default.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'scroll-bar nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; disable scroll bar
	  ;; (safe-funcall 'scroll-bar-mode 0)

	  #+END_SRC

**** Fringe

	 Contains code to initialize the built-in fringe bitmaps
	 as well as helpful functions for customizing the appearance of the
	 fringe.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'fringe nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; custom
	  ;; 0 -> ("no-fringes" . 0), remove ugly icons to represet new lines
	  ;; ascii is more than enough to represent this information
	  ;; default appearance of fringes on all frame
	  (customize-set-variable 'fringe-mode 0)

	  #+END_SRC

**** Mode-line
***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; remove underline
	  (customize-set-variable 'x-underline-at-descent-line t)

	  ;; mode-line format
	  (customize-set-variable 'mode-line-format
							  '("%e"
								mode-line-front-space
								mode-line-mule-info
								mode-line-modified
								mode-line-remote
								" "
								"%l:%c"
								" • "
								(:eval (propertized-buffer-identification "%b"))
								" • "
								"("
								mode-name
								")"
								(:eval (when vc-mode " »"))
								(vc-mode vc-mode)))

	  #+END_SRC

*** Editing
**** Indent

	 Commands for making and changing indentation in text.
	 These are described in the Emacs manual.

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; indentation can insert tabs if this is non-nil
	  (customize-set-variable 'indent-tabs-mode nil)

	  ;; default number of columns for margin-changing functions to indent
	  (customize-set-variable 'standard-indent 4)

	  ;; distance between tab stops (for display of tab characters), in columns.
	  (customize-set-variable 'tab-width 4)

	  ;; if 'complete, TAB first tries to indent the current line
	  ;; if t, hitting TAB always just indents the current line
	  ;; If nil, hitting TAB indents the current line if point is at the left margin
	  ;; or in the line's indentation
	  (customize-set-variable 'tab-always-indent 'complete)

	  #+END_SRC

**** Kmacro

	 The kmacro package provides the user interface to emacs' basic
	 keyboard macro functionality.  With kmacro, two function keys are
	 dedicated to keyboard macros, by default F3 and F4.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'kmacro nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key ctl-x-map (kbd "m") 'kmacro-keymap)

	  #+END_SRC

**** Elec-pair

	 Electric pairing: automatically matches parenthesis pairs,
	 should be enabled regardless the current major mode.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'elec-pair nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; alist of pairs that should be used regardless of major mode.
	  (customize-set-variable 'electric-pair-pairs
							  '((?\{ . ?\})
								(?\( . ?\))
								(?\[ . ?\])
								(?\" . ?\")))

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'electric-pair-mode 1)))

	  #+END_SRC

**** Newcomment

	 This library contains functions and variables for commenting and
	 uncommenting source code.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'newcomment nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; global-map
	  (global-set-key (kbd "M-c") 'comment-or-uncomment-region)

	  #+END_SRC

**** Face-remap

	 This package defines some simple operations that can be used for
	 maintaining the `face-remapping-alist' in a cooperative way.
	 This is especially important for the `default' face.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'face-remap nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; ctl-x-map (C-x)
	  (define-key ctl-x-map (kbd "=") 'text-scale-adjust)

	  #+END_SRC

**** Isearch

	 Incremental search minor mode.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'isearch nil t)

	  #+END_SRC

**** Delsel

	 This package makes the active region be pending delete, meaning that
	 text inserted while the region is active will replace the region contents.
	 This is a popular behavior of personal computers text editors.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'delsel nil t)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; delete selection-mode
	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'delete-selection-mode 1)))

	  #+END_SRC

**** Replace

	 This package supplies the string and regular-expression replace functions
	 documented in the Emacs user's manual.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'replace nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (global-set-key (kbd "M-s M-o") 'list-occurrences-at-point)

	  #+END_SRC

**** Rectangle

	 Rectangle: Operations on rectangles!

	 This package provides the operations on rectangles that are documented
	 in the Emacs manual.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'rect nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; TODO: find-out prefix map
	  (global-set-key (kbd "C-x r %") 'replace-rectangle)

	  #+END_SRC

**** Whitespace

	 This package is a minor mode to visualize and clean
	 blanks (TAB, (HARD) SPACE and NEWLINE).

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'whitespace nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; specify which kind of blank is visualized
	  ;; empty was removed
	  (customize-set-variable
	   'whitespace-style
	   '(face
		 tabs spaces trailing lines
		 space-before-tab newline indentation
		 space-after-tab space-mark tab-mark
		 newline-mark missing-newline-at-eof))

	  #+END_SRC


***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  ;; clean whitespace and newlines before buffer save
	  (add-hook 'before-save-hook #'whitespace-cleanup)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; binds
	  (define-key ctl-x-map (kbd ".") 'whitespace-mode)

	  #+END_SRC

*** Menus
**** Tmm

	 This package provides text mode access to the menu bar.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'tmm nil t)

	  #+END_SRC

*** Help
**** Help

	 GNU Emacs's built-in help system, the one invoked by
	 M-x help-for-help.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'help nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; always select the help window
	  (customize-set-variable 'help-window-select t)

	  ;; maximum height of a window displaying a temporary buffer.
	  (customize-set-variable 'temp-buffer-max-height
							  (lambda (buffer)
								(if (and (display-graphic-p) (eq (selected-window) (frame-root-window)))
									(/ (x-display-pixel-height) (frame-char-height) 4)
								  (/ (- (frame-height) 4) 4))))

	  ;; reference
	  ;; (customize-set-variable 'temp-buffer-max-height 12)

	  #+END_SRC

***** Display

	  #+BEGIN_SRC emacs-lisp

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'temp-buffer-resize-mode 1)))

	  #+END_SRC

**** Help-fns

	 This file contains those help commands which are complicated, and
	 which may not be used in every session. For example
	 `describe-function' will probably be heavily used when doing elisp
	 programming, but not if just editing C files.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'help-fns nil t)

	  #+END_SRC

**** Help-mode

	 Help-mode, which is the mode used by *Help* buffers, and
	 associated support machinery, such as adding hyperlinks, etc...

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'help-mode nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (eval-after-load 'help-mode
		(lambda ()
		  (when (boundp 'help-mode-map)
			(define-key help-mode-map (kbd "C-j") 'push-button))))

	  #+END_SRC

*** Docs
**** Info

	 The GNU Project distributes most of its manuals in the Info format,
	 which you read using an Info reader.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'info nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; non-nil means don’t record intermediate Info nodes to the history
	  (customize-set-variable 'info-history-skip-intermediate-nodes nil)

	  ;; 0 -> means do not display breadcrumbs
	  ;; (customize-set-variable 'info-breadcrumbs-depth 0)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (eval-after-load 'info
		(lambda ()
		  (when (boundp 'Info-mode-map)
			(define-key Info-mode-map (kbd "C-j") 'Info-follow-nearest-node))))

	  #+END_SRC

**** Eldoc

	 As you type a function's symbol name as part of a sexp,
	 it will print the argument list for that function.
	 Behavior is not identical; for example, you need not actually
	 type the function name, you need only move point around in a sexp that
	 calls it.  Also, if point is over a documented variable, it will print
	 the one-line documentation for that variable instead, to remind you of
	 that variable's meaning.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'eldoc nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; number of seconds of idle time to wait before printing.
	  (customize-set-variable 'eldoc-idle-delay 0.1)

	  ;; if value is any non-nil value other than t, symbol name may be truncated
	  ;; if it will enable the function arglist or documentation string to fit on a
	  ;; single line without resizing window
	  (customize-set-variable 'eldoc-echo-area-use-multiline-p t)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; enable eldoc globally
	  (add-hook 'window-setup-hook
				(lambda()
				  (funcall 'eldoc-mode 1)))

	  #+END_SRC

** Extensions
*** Loaddefs

	The local ~lisp-loaddefs.el~ was generated by
	=update-directory-autoloads=, using the ~/emacs.d/site-lisp~
	directory, where the packages were installed.

	Update/Generate =autoload= definitions for Lisp files in the directories.
	In an interactive call, you must give one argument, the name of a
	single directory. In a call from Lisp, you can supply multiple
	directories as separate arguments.

	#+BEGIN_SRC emacs-lisp

	;; generated by `update-directory-autoloads'
	(require 'site-lisp-loaddefs nil t)

	#+END_SRC

**** Lazy

	 Automatically generate `autoload' definitions.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'lazy)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; non-nil means starts to monitor the directories
	  (customize-set-variable 'lazy-load-enable-filenotify-flag t)

	  ;; non-nil means show debug messages
	  (customize-set-variable 'lazy-load-debug-messages-flag t)

	  ;; non-nil means run `lazy-load-update-autoloads' when emacs is idle
	  (customize-set-variable 'lazy-load-run-idle-flag nil)

	  ;; idle timer value
	  (customize-set-variable 'lazy-load-idle-seconds 60) ; 1 minute

	  ;; interval in seconds, used to trigger the timer callback
	  (customize-set-variable 'lazy-load-timer-interval 15)

	  ;; target files and directories
	  (customize-set-variable 'lazy-load-files-alist
							  (list
							   ;; lisp directory
							   (cons "lisp-loaddefs.el"
									 (expand-file-name "lisp/" user-emacs-directory))
							   ;; site-lisp directory
							   (cons "site-lisp-loaddefs.el"
									 (expand-file-name "site-lisp/" user-emacs-directory))))
	  #+END_SRC

***** Enable


	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'turn-on-lazy-load-mode)))

	  #+END_SRC

*** Command-Line-Interface

	Command line interface (CLI) is a text-based interface that is
	used to operate software and operating systems while allowing the
	user to respond to visual prompts by typing single commands into
	the interface and receiving a reply in the same way.

**** Shell

	 In computing, a shell is a user interface for access to an
	 operating system's services.

	 This package defines a shell-in-a-buffer (shell mode) built on
	 top of comint mode.  This is actually cmushell with things renamed
	 to replace its counterpart in Emacs 18.  cmushell is more
	 featureful, robust, and uniform than the Emacs 18 version.

	 Since this mode is built on top of the general command-interpreter-in-
	 a-buffer mode (comint mode), it shares a common base functionality,
	 and a common set of bindings, with all modes derived from comint mode.
	 This makes these modes easier to use.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'shell nil t)

	  #+END_SRC

****** Hooks

	   #+BEGIN_SRC emacs-lisp

	   ;; hook
	   (add-hook 'shell-mode-hook
				 (lambda()
				   ;; do not display continuation lines.
				   (setq truncate-lines nil)

				   ;; when available remove company-mode
				   (when (fboundp 'company-mode)
					 (company-mode -1))))

	   #+END_SRC

**** Eshell

	 Despite the sheer fact that running an Emacs shell can be fun, here
	 are a few of the unique features offered by Eshell:

	 - Integration with the Emacs Lisp programming environment
	 - A high degree of configurability.

	 - The ability to have the same shell on every system Emacs has been
	   ported to. Since Eshell imposes no external requirements, and
	   relies upon only the Lisp functions exposed by Emacs, it is quite
	   operating system independent. Several of the common UNIX
	   commands, such as ls, mv, rm, ln, etc., have been implemented in
	   Lisp in order to provide a more consistent work environment.

	   - If there is a command on disk, it will be executed
		 as in a normal shell.  If there is no command by that name on disk,
		 but a Lisp function with that name is defined, the Lisp function
		 will be called, using the arguments passed on the command line.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'eshell nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; ctl-x-map (C-x)
	  (define-key ctl-x-map (kbd "&") 'eshell)

	  #+END_SRC

*** Managers
**** Files

	 A file manager or file browser is a computer program that provides
	 a user interface to manage files and folders.

***** Dired-async

	  This package provides a redefinition of `dired-create-file' function,
	  performs copies, moves and all what is handled by `dired-create-file'
	  in the background using a slave Emacs process, by means of
	  the async.el module.

****** Require

	   #+BEGIN_SRC emacs-lisp

	   ;; (require 'dired-async nil t)

	   #+END_SRC

****** Binds

	   #+BEGIN_SRC emacs-lisp

	   (when (boundp 'dired-mode-map)
		 (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
		 (define-key dired-mode-map (kbd "C-j") 'dired-find-alternate-file))

	   #+END_SRC

****** Enable

	   #+BEGIN_SRC emacs-lisp

	   (add-hook 'window-setup-hook
				 (lambda ()
				   (funcall 'dired-async-mode 1)))

	   #+END_SRC

*** Emulators

	An emulator is hardware or software that enables a computer system
	(usually called host) to behave like another computer system
	(usually called guest).

	An emulator typically enables the host system to run software
	or use peripheral devices designed for the guest system.

**** Terminal

	 A terminal emulator is a computer program that emulates a graphic
	 terminal within a display architecture.

***** Term

	  Command-interpreter-in-a-buffer package (term mode).
	  The idea is that you can build specific process-in-a-buffer
	  modes on top of term mode -- e.g., lisp, shell, scheme, T, soar, ...

	  It seems that ~sh~ shell works better with term.

****** Require

	   #+BEGIN_SRC emacs-lisp

	   ;; (require 'term nil t)

	   #+END_SRC

****** Customize

	   #+BEGIN_SRC emacs-lisp

	   ;; if non-nil, is file name to use for explicitly requested inferior shell. (reference)
	   (customize-set-variable
		'explicit-shell-file-name (getenv "SHELL"))

	   ;; if non-nil, add a ‘/’ to completed directories
	   (customize-set-variable 'term-completion-addsuffix t)

	   ;; regexp to recognize prompts in the inferior process
	   ;; (customize-set-variable 'term-prompt-regexp "^\\(>\\|\\(->\\)+\\) *")
	   (customize-set-variable 'term-prompt-regexp "^[^#$%>\n]*[#$%>] *")

	   ;; if non-nil, automatically list possibilities on partial completion.
	   (customize-set-variable 'term-completion-autolist t)

	   ;; if true, buffer name equals process name
	   (customize-set-variable 'term-ansi-buffer-base-name t)

	   #+END_SRC

****** Functions

	   #+BEGIN_SRC emacs-lisp

	   (defun seconf/term-send-kill-line ()
		 "Kill line in multi-term mode with the possibility to paste it like in a normal shell."
		 (interactive)
		 (when (fboundp 'term-send-raw-string)
		   (progn
			 (kill-line)
			 (term-send-raw-string "\C-k"))))

	   (defun seconf/run-term ()
		 "Runs a term instance and upon buffer creation, interactively rename it."
		 (interactive)
		 (unless (fboundp 'term)
		   (error "Term not available"))
		 (command-execute 'multi-term)
		 (rename-buffer
		  (read-string "Rame term buffer: " nil nil "term") t))

	   #+END_SRC

****** Hooks

	   #+BEGIN_SRC emacs-lisp

	   (add-hook 'term-mode-hook
				 (lambda()
				   ;; do not display continuation lines.
				   (setq truncate-lines nil)
				   (toggle-truncate-lines)

				   (when (fboundp 'company-mode)
					 (company-mode -1))

				   ;; disable line numbers mode
				   (display-line-numbers-mode 0)))


	   ;; binds (with hook)
	   (add-hook 'term-mode-hook
				 (lambda ()
				   (when (and (boundp 'term-raw-map)
							  (boundp 'term-mode-map))
					 ;; term-raw-map
					 (define-key term-raw-map (kbd "C-z") 'term-line-mode)

					 ;; term-mode-map
					 (define-key term-mode-map (kbd "C-z") 'term-char-mode))))

	   #+END_SRC

****** Binds

	   #+BEGIN_SRC emacs-lisp

	   (define-key ctl-x-map (kbd "RET") 'seconf/run-term)

	   #+END_SRC

***** Multi-term

	  This package is for creating and managing multiple
	  terminal buffers in Emacs.

****** Require

	   #+BEGIN_SRC emacs-lisp

	   ;; (require 'multi-term nil t)

	   #+END_SRC

****** Customize

	   #+BEGIN_SRC emacs-lisp

	   ;; if this is nil, setup to environment variable of `SHELL'"
	   (customize-set-variable 'multi-term-program nil)

	   ;; focus terminal window after you open dedicated window
	   (customize-set-variable 'multi-term-dedicated-select-after-open-p t)

	   ;; rename multi-term-dedicated buffer
	   (customize-set-variable 'multi-term-dedicated-buffer-name "dedicated-term")

	   ;; customize dedicated term height
	   (customize-set-variable 'multi-term-dedicated-window-height 15)

	   ;; the buffer name of term buffer.
	   (customize-set-variable 'multi-term-buffer-name "term")

	   #+END_SRC

****** Binds

	   #+BEGIN_SRC emacs-lisp

	   (define-key ctl-x-map (kbd "C-x") 'multi-term-dedicated-toggle)

	   #+END_SRC

*** Apparence
**** Theme
***** Seconf-theme

	  Add theme directory to load-path and load the
	  default theme.

	  #+BEGIN_SRC emacs-lisp

	  ;; add seconf-theme-dir to theme load path
	  (add-to-list 'custom-theme-load-path
				   (concat user-emacs-directory "themes"))

	  ;; load theme
	  ;; (load-theme 'seconf t)
	  (load-theme 'moebius-glass t)

	  #+END_SRC

*** Dashboards

	A graphical summary of various pieces of important information,
	typically used to give an overview of a business.

**** Dashboard

	 An extensible Emacs dashboard, with sections for bookmarks,
	 projectile, org-agenda and more.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'dashboard nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; association list of items to show in the startup buffer.
	  (customize-set-variable 'dashboard-items
							  '((recents . 5)
								(projects . 5)
								(agenda . 5)
								(bookmarks . 5)))

	  ;; banners directory
	  ;;(customize-set-variable 'dashboard-banners-directory
	  ;;                        (expand-file-name "banner"  user-emacs-directory))

	  ;; specify the startup banner
	  (customize-set-variable 'dashboard-startup-banner 1)

	  ;; separator to use between the different pages.
	  (customize-set-variable 'dashboard-page-separator "

	  ")

	  ;; footer icon
	  (customize-set-variable 'dashboard-footer-icon
							  #(" " 0 1 (face dashboard-footer)))

	  ;; when non nil, a footer will be displayed at the bottom.
	  (customize-set-variable 'dashboard-set-footer nil)


	  (customize-set-variable
	   'dashboard-footer "As simple as walking.")

	  ;; a list of messages, one of which dashboard chooses to display
	  (customize-set-variable 'dashboard-footer-messages nil)

	  ;; when non nil, file lists will have icons
	  (customize-set-variable 'dashboard-set-file-icons nil)

	  ;; when non nil, heading sections will have icons
	  (customize-set-variable 'dashboard-set-heading-icons nil)

	  ;; set initial buffer choice (emacsclient fix)
	  (customize-set-variable 'initial-buffer-choice
							  (lambda ()
								(let ((initial-buffer (get-buffer "*dashboard*")))
								  (unless initial-buffer
									(setq initial-buffer (get-buffer "*scratch*")))
								  initial-buffer)))

	  #+END_SRC

***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf-initialize-dashboard ()
		"Opens or switch to *dashboard* buffer."
		(interactive)
		(let ((buffer (get-buffer "*dashboard*")))
		  (unless buffer
			(setq buffer (generate-new-buffer "*dashboard*")))
		  (funcall 'dashboard-insert-startupify-lists)
		  (funcall 'dashboard-refresh-buffer)))

	  (defun seconf-dashboard-insert-footer ()
		"Insert dashboard-footer message."
		(read-only-mode 0)
		(when (boundp 'dashboard-footer)
		  (insert (propertize dashboard-footer 'face 'dashboard-footer)))
		(insert "\n")
		(read-only-mode 1))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  ;; insert footer
	  (add-hook 'dashboard-mode-hook
				(lambda ()
				  (interactive)
				  (seconf-dashboard-insert-footer)))

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'after-init-hook 'seconf-initialize-dashboard)

	  #+END_SRC

*** Buffers
**** Ibuffer

	 A major mode for viewing open buffers arranged in a list.
	 Ibuffer offers a convenient way of performing many operations on
	 open buffers, adding filters for subset viewing and sorting by
	 various criteria.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'ibuffer nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; the criteria by which to sort the buffers
	  (customize-set-variable 'ibuffer-default-sorting-mode 'filename/process)

	  ;; if non-nil, display the current Ibuffer buffer itself
	  (customize-set-variable 'ibuffer-view-ibuffer nil)

	  ;; if non-nil, then show the names of filter groups which are empty
	  (customize-set-variable 'ibuffer-show-empty-filter-groups nil)

	  ;; an alist of filtering groups to switch between.
	  (customize-set-variable
	   'ibuffer-saved-filter-groups
	   (quote (("default"
				("Emacs" (or
						  (name . "^\\*eldoc for")
						  (name . "^\\*scratch\\*$")
						  (name . "^\\*Warnings\\*$")
						  (name . "^\\*Completions\\*$")
						  (name . "^\\*Completions\\*$")
						  (name . "^\\*Messages\\*$")))

				("Comint" (or
						   (mode . comint-mode)
						   (name . "^\\*Async Shell Command\\*$")
						   (name . "^\\*dashboard\\*$")
						   (name . "^\\*tramp")
						   (name . "^\\*make\\*$")))

				("Custom" (mode . Custom-mode))
				("IRC" (mode . rcirc-mode))

				("Info"  (or
						  (mode . Info-mode)
						  (mode . dictionary-mode)
						  (mode . help-mode)
						  (mode . apropos-mode)
						  (mode . Man-mode)))

				("Tags" (or
						 (mode . tags-table-mode)
						 (mode . xref--xref-buffer-mode)))

				("Compilation" (or
								(mode . compilation-mode)
								(mode . emacs-lisp-compilation-mode)
								(name . "^\\*compilation\\*$")))

				("Debug"  (or (mode . debugger-mode)
							  (name . "^\\*debug")))

				("Flycheck" (or
							 (mode . flycheck-mode)
							 (mode . flycheck-error-list-mode)
							 (name . "^\\*Flycheck error messages\\*$")))

				("Grep" (or
						 (mode . ag-mode)
						 (mode . occur-mode)
						 (mode . locate-mode)))

				("Term" (mode . term-mode))
				("Shell" (or
						  (mode . shell-mode)
						  (mode . eshell-mode)))

				("Exwm" (mode . exwm-mode))

				("Emms" (or
						 (mode . emms-playlist-mode)
						 (name . "^\\*EMMS-LOG\\*$")))

				("Eww" (mode . eww-mode))
				("Dired" (mode . dired-mode))

				("Gnus" (or
						 (mode . message-mode)
						 (mode . bbdb-mode)
						 (mode . mail-mode)
						 (mode . gnus-group-mode)
						 (mode . gnus-server-mode)
						 (mode . gnus-summary-mode)
						 (mode . gnus-article-mode)
						 (mode . gnus-browse-mode)
						 (name . "^\\.bbdb$")
						 (name . "^\\.newsrc-dribble")))

				("Magit" (or
						  (mode . magit-mode)
						  (mode . magit-status-mode)
						  (mode . magit-diff-mode)
						  (mode . magit-process-mode)))

				("Planner" (or
							(name . "^\\*Calendar\\*$")
							(name . "^diary$")
							(mode . muse-mode)))

				("Dev" (or
						(mode . prog-mode)
						(mode . c-mode)
						(mode . c++-mode)
						(mode . emacs-lisp-mode)
						(mode . web-mode)
						(mode . js-mode)))

				("IRC" (or
						(mode . erc-mode)))))))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  ;; hook run upon entry into `ibuffer-mode'
	  (add-hook 'ibuffer-mode-hook
				'(lambda ()
				   (ibuffer-auto-mode 1)
				   (ibuffer-switch-to-saved-filter-groups "default")))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key ctl-x-map (kbd "C-b") 'ibuffer)

	  #+END_SRC

*** Editing
**** Iedit

	 This package includes Emacs minor modes (iedit-mode and
	 iedit-rectangle-mode) based on a API library (iedit-lib) and allows you to edit
	 one occurrence of some text in a buffer (possibly narrowed) or region, and
	 simultaneously have other occurrences edited in the same way, with visual
	 feedback as you type.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'iedit nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; if no-nil, the key is inserted into global-map,
	  ;; isearch-mode-map, esc-map and help-map.
	  ;; (customize-set-variable 'iedit-toggle-key-default (kbd "C-;"))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; bind (iedit-mode-keymap)
	  (eval-after-load 'iedit
		(lambda ()
		  (when (boundp 'iedit-mode-keymap)
			(define-key iedit-mode-keymap (kbd "<tab>") 'seconf-complete-in-buffer-or-indent)
			(define-key iedit-mode-keymap (kbd "M-n") 'iedit-next-occurrence))))

	  ;; bind (global)
	  (global-set-key (kbd "C-;") 'iedit-mode)

	  #+END_SRC

**** Undo-tree

	 Emacs has a powerful undo system. Unlike the standard undo/redo system in
	 most software, it allows you to recover *any* past state of a buffer
	 (whereas the standard undo/redo system can lose past states as soon as you
	 redo). However, this power comes at a price: many people find Emacs' undo
	 system confusing and difficult to use, spawning a number of packages that
	 replace it with the less powerful but more intuitive undo/redo system.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'undo-tree nil t)

	  #+END_SRC

***** Aliases

	  #+BEGIN_SRC emacs-lisp

	  ;; define alias for redo
	  (defalias 'redo 'undo-tree-redo)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key ctl-x-map (kbd "u") 'undo-tree-visualize)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; enable
	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'global-undo-tree-mode 1)))

	  #+END_SRC

**** EditorConfig

	 EditorConfig helps developers define and maintain consistent
	 coding styles between different editors and IDEs.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'editorconfig nil t)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; (safe-funcall 'editorconfig-mode 1)

	  #+END_SRC

*** Browser
**** Eww

	 Elisp www browser configuration.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'eww nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; prefix uRL to search engine
	  (customize-set-variable 'eww-search-prefix "https://www.google.com/search?q=")
	  ;; (customize-set-variable eww-search-prefix "https://duckduckgo.com/html/?q=")

	  ;; directory where files will downloaded
	  (customize-set-variable 'eww-download-directory "~/down")

	  ;; symbol used to represent a checkbox
	  (customize-set-variable 'eww-form-checkbox-symbol "[ ]")

	  ;; symbol used to represent a selected checkbox.
	  (customize-set-variable 'eww-form-checkbox-selected-symbol "[X]")
	  ;; (customize-set-variable eww-form-checkbox-symbol "☐") ; Unicode hex 2610
	  ;; (customize-set-variable eww-form-checkbox-selected-symbol "☑") ; Unicode hex 2611

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'eww-mode-hook
				;; disable truncate lines
				(lambda () (setq truncate-lines nil)))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (eval-after-load 'eww
		(lambda ()
		  (when (boundp 'eww-mode-map)
			(define-key eww-mode-map (kbd "C-j") 'eww-follow-link))))

	  #+END_SRC

**** Browse-url

	 This package provides functions which read a URL (Uniform Resource
	 Locator) from the minibuffer, defaulting to the URL around point,
	 and ask a World-Wide Web browser to load it.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'browse-url nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; the name of the browser program used by ‘browse-url-generic’.
	  (customize-set-variable 'browse-url-generic-program "eww")

	  ;; function to display the current buffer in a WWW browser: eww
	  (customize-set-variable 'browse-url-browser-function 'eww-browse-url)

	  #+END_SRC

*** Filters
**** Ag
***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'ag nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; non-nil means we highlight the current search term in results
	  (customize-set-variable 'ag-highlight-search t)

	  ;; non-nil means we reuse the existing search results buffer
	  (customize-set-variable 'ag-reuse-buffers t)

	  ;; non-nil means we open search results in the same window
	  (customize-set-variable 'ag-reuse-window t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; projects keymap
	  (define-key seconf-pm-map (kbd "a") 'ag-project-at-point)

	  ;; filter keymap
	  (define-key seconf-filter-map (kbd "a") 'ag)
	  (define-key seconf-filter-map (kbd "d") 'ag-dired)
	  (define-key seconf-filter-map (kbd "f") 'ag-files)

	  #+END_SRC

**** Grep

	 This package provides the grep facilities documented in t
	 he Emacs user's manual.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'grep nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; the default find command for M-x grep-find or M-x find-grep
	  (customize-set-variable 'grep-find-command
							  '("find ~/ -type f -exec grep --color -nH --null -e  \\{\\} +" . 49))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key seconf-filter-map (kbd "r") 'rgrep)

	  #+END_SRC

*** Interpreters

	Generic interpreter interface configurations and customization,
	languages specific interpreters (for example: python)
	will be placed in the ~Programming~ sections.

**** Comint

	 This package defines a general command-interpreter-in-a-buffer
	 (comint mode). The idea is that you can build specific process-in-a-buffer
	 modes on top of comint mode -- e.g., Lisp, shell, scheme, T, soar, ....

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'comint nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; if non-nil, assume that the subprocess echoes any input.
	  (customize-set-variable 'comint-process-echoes t)

	  ;; if non-nil, use comint-prompt-regexp to recognize prompts.
	  (customize-set-variable 'comint-use-prompt-regexp t)

	  ;; regexp to recognize prompts in the inferior process.
	  ;; (customize-set-variable 'comint-prompt-regexp ".*:.*>.*? ")

	  ;; value to use for TERM when the system uses terminfo.
	  (customize-set-variable 'comint-terminfo-terminal "eterm-color")

	  #+END_SRC

**** IELM
***** Require

	  Provides a nice interface to evaluating Emacs Lisp expressions.
	  Input is handled by the comint package, and output is passed
	  through the pretty-printer.

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'ielm nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; if non-nil, after entering the first line of
	  ;; an incomplete sexp, a newline will be inserted after the prompt.
	  (customize-set-variable 'ielm-dynamic-multiline-inputs t)

	  ;; if non-nil, IELM will beep on error
	  (customize-set-variable 'ielm-noisy nil)

	  ;; prompt used in IELM
	  (customize-set-variable 'ielm-prompt "elisp » ")

	  ;; if non-nil, the IELM prompt is read only
	  (customize-set-variable 'ielm-prompt-read-only nil)

	  #+END_SRC

**** Sql

	 Specialized ~comint.el~ for SQL interpreters.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'sql nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; select the SQL database product used
	  (customize-set-variable 'sql-product "sqlite")

	  #+END_SRC

*** Office
**** Org

	 Org is a mode for keeping notes, maintaining ToDo lists, and doing
	 project planning with a fast and effective plain-text system.

	 Org mode develops organizational tasks around NOTES files that
	 contain information about projects as plain text.  Org mode is
	 implemented on top of outline-mode, which makes it possible to keep
	 the content of large files well structured.  Visibility cycling and
	 structure editing help to work with the tree.  Tables are easily
	 created with a built-in table editor.  Org mode supports ToDo
	 items, deadlines, time stamps, and scheduling.  It dynamically
	 compiles entries into an agenda that utilizes and smoothly
	 integrates much of the Emacs calendar and diary.  Plain text
	 URL-like links connect to websites, emails, Usenet messages, BBDB
	 entries, and any files related to the projects.  For printing and
	 sharing of notes, an Org file can be exported as a structured ASCII
	 file, as HTML, or (todo and agenda items only) as an iCalendar
	 file. It can also serve as a publishing tool for a set of linked
	 webpages.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'org nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp
	  ;; custom
	  ;; when non-nil, fontify code in code blocks
	  (customize-set-variable 'org-src-fontify-natively t)

	  ;; if non-nil, the effect of TAB in a code block is as if it were
	  ;; issued in the language major mode buffer
	  (customize-set-variable 'org-src-tab-acts-natively t)

	  ;; indentation for the content of a source code block.
	  (customize-set-variable 'org-edit-src-content-indentation 0)

	  ;; confirm before evaluation
	  (customize-set-variable 'org-confirm-babel-evaluate t)

	  ;; how the source code edit buffer should be displayed
	  (customize-set-variable 'org-src-window-setup 'current-window)

	  ;; non-nil means C-a and C-e behave specially in headlines and items
	  (customize-set-variable 'org-special-ctrl-a/e t)

	  #+END_SRC

***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf/org/set-company-backends ()
		"Set `org-mode' company backends."
		(interactive)
		(seconf-set-company-backends
		 '((company-dabbrev :with
							company-yasnippet
							company-dabbrev-code
							company-ispell)
		   (company-files))))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'org-mode-hook
				(lambda ()
				  ;; do not truncate lines
				  (setq truncate-lines nil)

				  ;; set company backends
				  (seconf/org/set-company-backends)

				  ;; languages which can be evaluated in Org buffers.
				  (org-babel-do-load-languages
				   'org-babel-load-languages
				   '((emacs-lisp . t)
					 (shell . t)
					 (haskell . t)
					 (ocaml . t)
					 (sqlite . t)
					 (python . t)))))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (eval-after-load 'org
		(lambda()
		  (when (boundp 'org-mode-map)
			(define-key org-mode-map (kbd "C-M-i") 'seconf-complete-in-buffer-or-indent)
			)))

	  #+END_SRC

**** Markdown

	 Major mode for editing Markdown files.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'markdown-mode nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  (customize-set-variable 'markdown-command "multimarkdown")

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (when (boundp 'markdown-mode-map)
		(progn
		  (define-key markdown-mode-map (kbd "TAB") 'seconf-complete-in-buffer-or-indent)))

	  #+END_SRC

*** Documentation
**** Man

	 This package provides a function, `man', with which you can browse
	 UNIX manual pages. Formatting is done in background so that you
	 can continue to use your Emacs while processing is going on.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'man nil t)

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'Man-mode-hook
				(lambda ()
				  ;; don't truncate lines
				  (setq truncate-lines nil)))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (eval-after-load 'man
		(lambda ()
		  (when (boundp 'Man-mode-map)
			(define-key Man-mode-map (kbd "C-j") 'push-button))))

	  ;; seconf-docs-map docs actions prefix map
	  (define-key seconf-docs-map (kbd "m") 'manual-entry)

	  #+END_SRC

**** Woman

	 WoMan implements a subset of the formatting performed by the Emacs
	 `man' (or `manual-entry') command to format a UN*X manual `page'
	 for display, but without calling any external programs.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'woman nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; if non-nil then show the *WoMan-Log* buffer if appropriate
	  (customize-set-variable 'woman-show-log nil)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key seconf-docs-map (kbd "w") 'woman)

	  #+END_SRC

**** Dash-docs

	 This package exposes functionality to work with and search dash
	 docsets.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'dash-docs nil t)
	  ;; You can thank esac-io for this:
	  ;; https://github.com/esac-io/ddoc

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; default path for docsets
	  (customize-set-variable
	   'ddoc-docsets-path
	   (concat (expand-file-name user-emacs-directory) "docsets"))

	  ;; minimum length to start searching in docsets
	  ;; (customize-set-variable 'dash-docs-min-length 0)

	  ;; format of the displayed candidates
	  (customize-set-variable 'ddoc-candidate-format "%d %t %n")

	  #+END_SRC

***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf-activate-docset (docset)
		"Activate a DOCSET, if available."
		(when (fboundp 'ddoc-activate-docset)
		  (funcall 'ddoc-activate-docset docset)))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; seconf-docs-map
	  ;; (define-key seconf-docs-map (kbd "u") 'ddoc-update-docset)
	  ;; (define-key seconf-docs-map (kbd "i") 'ddoc-async-install-docset)
	  (define-key seconf-docs-map (kbd "i") 'ddoc-install-docset)
	  (define-key seconf-docs-map (kbd "a") 'ddoc-activate-docset)
	  (define-key seconf-docs-map (kbd "d") 'ddoc-deactivate-docset)
	  (define-key seconf-docs-map (kbd "l") 'ddoc-find-file)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; enable ddoc after emacs startup
	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'turn-on-ddoc-mode)))

	  #+END_SRC

**** Rfc-docs

	 Browser/search/read local RFC files.
	 To make it work faster download the RFC files and change
	 the 'rfc-docs-directory' dir to match
	 the path where all the RFCs were extracted.

	 The RFC collection can be downloaded [[https://www.rfc-editor.org/retrieve/bulk][here]].

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'rfc-docs nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; the directory where RFC documents are stored
	  (customize-set-variable
	   'rfc-docs-directory
	   (concat (expand-file-name user-emacs-directory) "rfc/"))

	  #+END_SRC

*** Completions
**** Dabbrev

	 The purpose with this package is to let you write just a few
	 characters of words you've written earlier to be able to expand
	 them.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'dabbrev nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; non-nil means case sensitive search.
	  (customize-set-variable 'dabbrev-upcase-means-case-search t)

	  ;; whether dabbrev treats expansions as the same if they differ in case
	  ;; a value of nil means treat them as different.
	  (customize-set-variable 'dabbrev-case-distinction t)

	  #+END_SRC

**** Hippie-exp
***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'hippie-exp nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (global-set-key (kbd "M-\\") 'hippie-expand)

	  #+END_SRC

**** Yasnippet

	 YASnippet is a template system for Emacs. It allows you to type an
	 abbreviation and automatically expand it into
	 function templates. Bundled language templates include:
	 C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'yasnippet nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; binds seconf-completion-map
	  (define-key seconf-completion-map (kbd "e") 'yas-expand)
	  (define-key seconf-completion-map (kbd "i") 'yas-insert-snippet)
	  (define-key seconf-completion-map (kbd "v") 'yas-visit-snippet-file)

	  ;; binds yas-keymap
	  (eval-after-load 'yasnippet
		(lambda ()
		  (when (boundp 'yas-keymap)
			(define-key yas-keymap (kbd "TAB") nil)
			(define-key yas-keymap (kbd "<tab>") nil)
			(define-key yas-keymap (kbd "M-TAB") 'yas-next-field))

		  ;; unbind: clean minor mode map alist
		  (setq minor-mode-map-alist nil)))

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; enable yasnippet after emacs startup
	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'yas-global-mode 1)))

	  #+END_SRC

**** Company

	 Company is a modular completion framework.
	 Modules for retrieving completion candidates are called backends,
	 modules for displaying them are front-ends.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'company nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; set echo delay
	  (customize-set-variable 'company-echo-delay 0.1)

	  ;; idle delay in seconds until completion starts automatically
	  (customize-set-variable 'company-idle-delay nil)

	  ;; maximum number of candidates in the tooltip
	  (customize-set-variable 'company-tooltip-limit 6)

	  ;; set minimum prefix length
	  (customize-set-variable 'company-minimum-length 2)

	  ;; if enabled, selecting item before first or after last wraps around
	  (customize-set-variable 'company-selection-wrap-around t)

	  ;; sort by frequency
	  (customize-set-variable 'company-transformers
							  '(company-sort-by-occurrence))

	  ;; whether to downcase the returned candidates.
	  (customize-set-variable 'company-dabbrev-downcase t)

	  ;; if enabled, disallow non-matching input
	  (customize-set-variable 'company-require-match nil)

	  ;; When non-nil, align annotations to the right tooltip border
	  (customize-set-variable 'company-tooltip-align-annotations nil)

	  ;; show candidates number
	  ;; to select completions use: M-1, M-2, etc..
	  (customize-set-variable 'company-show-numbers t)

	  ;; research
	  ;; (customize-set-variable 'company-tooltip-flip-when-above nil)

	  ;; the list of active backends (completion engines)
	  (customize-set-variable
	   'company-backends
	   '(company-capf company-files company-ispell
					  (company-dabbrev-code company-keywords)
					  company-dabbrev))

	  #+END_SRC

***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf-set-company-backends (backends)
		"Set company back ends with BACKENDS."
		(make-local-variable 'company-backends)
		(when (boundp 'company-backends)
		  (setq company-backends backends)))

	  (defun seconf-company-complete-or-indent ()
		"Company (complete anything (in-buffer)) or indent."
		(interactive)
		(cond ((looking-at "\\_>")
			   (funcall 'company-complete))
			  (t (indent-according-to-mode))))

	  (defun seconf-complete-in-buffer-or-indent ()
		"Company (complete anything (in-buffer)) or indent."
		(interactive)
		(cond ((looking-at "\\_>")
			   (funcall 'company-complete-common))
			  (t (indent-according-to-mode))))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; company-active-map
	  (eval-after-load 'company
		(lambda ()
		  (when (boundp 'company-active-map)
			(define-key company-active-map (kbd "TAB") 'company-complete-common)
			(define-key company-active-map (kbd "C-j") 'company-complete-selection)
			(define-key company-active-map (kbd "C-n") 'company-select-next)
			(define-key company-active-map (kbd "C-p") 'company-select-previous))))

	  ;; seconf-complete map
	  (define-key seconf-completion-map (kbd "`") 'company-ispell)
	  (define-key seconf-completion-map (kbd "f") 'company-files)
	  (define-key seconf-completion-map (kbd "e") 'company-etags)
	  (define-key seconf-completion-map (kbd "y") 'company-yasnippet)

	  ;; redundancy
	  (define-key seconf-completion-map (kbd "TAB") 'seconf-complete-in-buffer-or-indent)

	  ;; global
	  (global-set-key (kbd "C-TAB") 'seconf-complete-in-buffer-or-indent)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; enable globally
	  (add-hook 'window-setup-hook
				(lambda()
				  (funcall 'global-company-mode 1)))

	  #+END_SRC

**** Company-statistics

	 Every time a candidate is chosen using company-mode, we keep track of this
	 (for a limited amount of recent choices). When presenting completion
	 candidates next time, they are sorted according to the score thus acquired.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'company-statistics nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; set company-statistics cache location
	  (customize-set-variable
	   'company-statistics-file
	   (concat user-emacs-directory "cache/company-statistics-cache.el"))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'company-mode-hook 'company-statistics-mode)

	  #+END_SRC

*** Navigation
**** Imenu

	 This package provide a framework for mode-specific buffer indexes.
	 A buffer index is an alist of names and buffer positions.
	 For instance all functions in a C-file and their positions.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'imenu nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; use a popup menu rather than a minibuffer prompt (no)
	  (customize-set-variable 'imenu-use-popup-menu t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key seconf-tags-map (kbd "t") 'imenu)

	  #+END_SRC

**** Etags

	 The etags program is used to create a tag table file, in a format
	 understood by emacs(1).

	 This package provides a elisp etags interface and functionality
	 related with the tags system

	 To switch to a new tags table, do not set `tags-file-name; instead,
	 invoke ‘visit-tags-table’, which is the only reliable way of
	 setting the value of this variable, whether buffer-local or global.
	 Use the ‘etags’ program to make a tags table file.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'etags nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; control whether to add a new tags table to the current list
	  ;; t means do; nil means don’t (always start a new list)
	  (customize-set-variable 'tags-add-tables nil)

	  ;; if non-nil, print the name of the tags file in the *Tags List* buffer.
	  (customize-set-variable 'tags-apropos-verbose t)

	  ;; whether tags operations should be case-sensitive
	  ;; a value of t means case-insensitive, a value of nil means case-sensitive
	  (customize-set-variable 'tags-case-fold-search t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key seconf-tags-map (kbd "s") 'tags-search)
	  (define-key seconf-tags-map (kbd "r") 'tags-query-replace)
	  (define-key seconf-tags-map (kbd "f") 'find-tag)
	  (define-key seconf-tags-map (kbd "l") 'list-tags)
	  (define-key seconf-tags-map (kbd "v") 'visit-tags-table)
	  (define-key seconf-tags-map (kbd "d") 'tags-reset-tags-tables)
	  (define-key seconf-tags-map (kbd "c") 'select-tags-table)

	  #+END_SRC

**** Xref

	 This file provides a somewhat generic infrastructure for cross
	 referencing commands, in particular `find-definition'.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'xref nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; if non-nil, prompt for the identifier to find
	  ;; when t, always prompt for the identifier name
	  ;; when nil, prompt only when there’s no value at point we can use,
	  ;; or when the command has been called with the prefix argument.

	  ;; (not xref-find-definitions
	  ;;      xref-find-definitions-other-window
	  ;;      xref-find-definitions-other-frame)
	  (customize-set-variable 'xref-prompt-for-identifier t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key seconf-tags-map (kbd "a") 'xref-find-apropos)

	  #+END_SRC

*** Building
**** Cmake-ide

	 This package runs CMake and sets variables for IDE-like functionality
	 provided by other packages such as:
	 On the fly syntax checks with flycheck
	 auto-completion using auto-complete-clang or company-clang.
	 Jump to definition and refactoring with rtags.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'cmake-ide nil t)

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  ;; (add-hook 'c-mode-hook 'cmake-ide-setup)
	  ;; (add-hook 'c++-mode-hook 'cmake-ide-setup)

	  #+END_SRC

*** Compilation
**** Auto-compile

	 This package provides two minor modes which automatically
	 recompile Emacs Lisp source files. Together these modes guarantee
	 that Emacs never loads outdated byte code files. (Research)

**** Compile

	 Emacs can run compilers for languages such as C and Fortran, feeding the
	 compilation log into an Emacs buffer.  It can also parse the error
	 messages and show you where the errors occurred.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'compile nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; non-nil to scroll the *compilation* buffer window as output appears
	  (customize-set-variable 'compilation-scroll-output t)

	  ;; if t, always kill a running compilation process before starting a new one
	  (customize-set-variable 'compilation-always-kill t)

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  ;; don't truncate lines
	  (add-hook 'compilation-mode-hook
				(lambda ()
				  (setq truncate-lines nil)))

	  ;; fix compilation buffer colors
	  (add-hook 'compilation-filter-hook
				(lambda ()
				  (when (and (eq major-mode 'compilation-mode)
							 (boundp 'compilation-filter-start))
					(funcall 'ansi-color-apply-on-region
							 compilation-filter-start
							 (point-max)))))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; utils map
	  (define-key seconf-utils-map (kbd "c") 'compile-history)
	  (define-key seconf-utils-map (kbd "e") 'shell-command)
	  (define-key seconf-utils-map (kbd "C-e") 'shell-command-current-buffer)

	  #+END_SRC

*** Versioning

	Version control packages.

**** Magit

	 Magit is an interface to the version control system Git,
	 implemented as an Emacs package.  Magit aspires to be a complete
	 Git porcelain.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'magit nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key ctl-x-map (kbd "j") 'magit-status)

	  #+END_SRC

*** Project Management
**** Projectile


	 This package provides easy project management and navigation.
	 The concept of a project is pretty basic - just a folder containing
	 special file. Currently git, mercurial and bazaar repos are
	 considered projects by default. If you want to mark a folder
	 manually as a project just create an empty .projectile file in it.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'projectile nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; enable cache and choose indexing method
	  (customize-set-variable 'projectile-enable-caching t)
	  (customize-set-variable 'projectile-indexing-method 'hybrid)
	  (customize-set-variable 'projectile-completion-system 'default)

	  ;; set bookmarks file localtion (cache)
	  (customize-set-variable 'projectile-known-projects-file
							  (concat user-emacs-directory "cache/projectile-bookmarks.eld"))

	  (customize-set-variable 'projectile-cache-file
							  (concat user-emacs-directory "cache/projectile.cache"))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key seconf-pm-map (kbd "g") 'projectile-grep)
	  (define-key seconf-pm-map (kbd "p") 'projectile-ag)
	  (define-key seconf-pm-map (kbd "t") 'projectile-find-tag)
	  (define-key seconf-pm-map (kbd "f") 'projectile-find-file)
	  (define-key seconf-pm-map (kbd "<SPC>") 'projectile-compile-project)
	  (define-key seconf-pm-map (kbd "&") 'projectile-run-eshell)
	  (define-key seconf-pm-map (kbd "o") 'projectile-switch-project)
	  (define-key seconf-pm-map (kbd "r") 'projectile-replace-regexp)
	  (define-key seconf-pm-map (kbd "R") 'projectile-replace)
	  (define-key seconf-pm-map (kbd "s") 'projectile-save-project-buffers)
	  (define-key seconf-pm-map (kbd "d") 'projectile-discover-projects-in-directory)
	  (define-key seconf-pm-map (kbd "c") 'projectile-cleanup-known-projects)
	  (define-key seconf-pm-map (kbd "C") 'projectile-invalidate-cache)
	  (define-key seconf-pm-map (kbd "U") 'projectile-purge-dir-from-cache)
	  (define-key seconf-pm-map (kbd "u") 'projectile-purge-file-from-cache)
	  (define-key seconf-pm-map (kbd ".") 'projectile-edit-dir-locals)
	  (define-key seconf-pm-map (kbd "k") 'projectile-kill-buffers)
	  (define-key seconf-pm-map (kbd "D") 'projectile-remove-known-project)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'projectile-mode 1)))

	  #+END_SRC

** Development
*** Generic

	Generic programming modes (minor/major).

**** Prog-mode

	 Generic programming mode, from which others derive.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'prog-mode nil t)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key prog-mode-map (kbd "<tab>") 'seconf-complete-in-buffer-or-indent)

	  #+END_SRC

**** Hideshow

	 Minor mode to hide and show code and comment blocks.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'hideshow nil t)

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'prog-mode-hook 'hs-minor-mode)

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; ctl-x-map
	  (define-key ctl-x-map (kbd "[") 'hs-toggle-hiding)

	  #+END_SRC

**** Conf

	 This package is designed to edit many similar varieties of
	 Configuration and initialization files.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'conf-mode nil t)

	  #+END_SRC


***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf/conf/set-company-backends ()
		"Set `conf-mode' company backends."
		(interactive)
		(seconf-set-company-backends
		 '((company-yasnippet :with
							  company-dabbrev
							  company-dabbrev-code)
		   (company-keywords)
		   (company-files))))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'conf-mode-hook
				(lambda ()
				  ;; set company backends
				  (seconf/conf/set-company-backends)))

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

			(add-hook 'window-setup-hook
					  (lambda ()
						(add-to-list 'auto-mode-alist '("\\.compose\\'" . conf-mode))
						(add-to-list 'auto-mode-alist '("\\.dockerfile\\'" . conf-mode))
						(add-to-list 'auto-mode-alist '("\\Dockerfile\\'" . conf-mode))
						(add-to-list 'auto-mode-alist '("\\.yml\\'" . conf-mode))
						(add-to-list 'auto-mode-alist '("\\.yaml\\'" . conf-mode))
						(add-to-list 'auto-mode-alist '("\\.conf\\'" . conf-mode))))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; conf-mode-map
	  (eval-after-load 'conf-mode
		(lambda ()
		  (when (boundp 'conf-mode-map)
			(define-key conf-mode-map (kbd "TAB") 'seconf-complete-in-buffer-or-indent))))

	  #+END_SRC

**** Text

	 This package provides the fundamental text mode documented in the
	 Emacs user's manual.

	 Major mode for editing text written for humans to read.
	 In this mode, paragraphs are delimited only by blank or white lines.
	 You can thus get the full benefit of adaptive filling
	 (see the variable `adaptive-fill-mode').

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'text-mode nil t)

	  #+END_SRC

***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf/text/set-company-backends ()
		"Set `text-mode' company backends."
		(interactive)
		(seconf-set-company-backends
		 '((company-ispell :with
						   company-dabbrev)
		   (company-files))))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'text-mode-hook
				(lambda ()
				  ;; turn on auto fill mode
				  (turn-on-auto-fill)

				  ;; set company backends
				  (seconf/text/set-company-backends)))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (define-key text-mode-map (kbd "C-c C-g") 'keyboard-quit)
	  (define-key text-mode-map (kbd "TAB") 'seconf-complete-in-buffer-or-indent)

	  (define-key text-mode-map (kbd "C-c C-k") 'with-editor-cancel)
	  (define-key text-mode-map (kbd "C-c C-c") 'with-editor-finish)

	  #+END_SRC

**** Subword

	 This package provides the `subword' minor mode, which merges the
	 old remap-based subword.el (derived from cc-mode code) and
	 cap-words.el, which takes advantage of core Emacs
	 word-motion-customization functionality.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'subword nil t)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'global-subword-mode 1)))

	  #+END_SRC

**** Paren

	 It will display highlighting on whatever paren matches the one
	 before or after point.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'paren nil t)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; visualization of matching parens
	  (add-hook 'window-setup-hook
				(lambda ()
				  (funcall 'show-paren-mode 1)))

	  #+END_SRC

**** Make-mode

	 Major mode for editing standard Makefiles.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'make-mode nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; if non-nil, automatically clean up continuation lines when saving
	  (customize-set-variable 'makefile-cleanup-continuations t)

	  ;; if non-nil, insert a TAB after a target colon
	  (customize-set-variable 'makefile-tab-after-target-colon t)

	  #+END_SRC

***** Hooks

**** Cmake-mode

	 Provides syntax highlighting and indentation for CMakeLists.txt and
	 *.cmake source files.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'cmake-mode nil t)

	  #+END_SRC

*** Lisp
**** Lisp-mode

	 The base major mode for editing Lisp code (used also for Emacs Lisp).
	 This mode is documented in the Emacs manual.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'lisp-mode nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; number of columns to indent the second line of a (def...) form
	  (customize-set-variable 'lisp-body-indent 2)

	  #+END_SRC

*** Elisp
**** Elisp-mode

	 The major mode for editing Emacs Lisp code.
	 Tis mode is documented in the Emacs manual.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'elisp-mode nil t)

	  #+END_SRC

***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf/elisp/set-company-backends ()
		"Set elisp company backends."
		(interactive)
		(seconf-set-company-backends
		 '((company-elisp :with company-capf company-dabbrev-code)
		   (company-dabbrev)
		   (company-files))))
	  ;; (company-yasnippet)

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  ;; enable minor modes
	  (add-hook 'emacs-lisp-mode-hook
				(lambda()
				  (funcall 'eldoc-mode 1)))

	  (add-hook 'lisp-interaction-mode-hook
				(lambda()
				  (funcall 'eldoc-mode 1)))

	  ;; set backends (company, flychecker, dash-docs)
	  (add-hook 'emacs-lisp-mode-hook
				(lambda ()
				  ;; set company backends
				  (seconf/elisp/set-company-backends)

				  ;; set flycheck checker
				  ;; (seconf-set-flycheck-checker 'emacs-lisp)

				  ;; activate dash docset (emacs)
				  (seconf-activate-docset "Emacs Lisp")))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; emacs-lisp-mode-map
	  (eval-after-load 'elisp-mode
		(lambda ()
		  (when (boundp 'emacs-lisp-mode-map)
			;; unbind
			(define-key emacs-lisp-mode-map (kbd "DEL") 'nil)
			(define-key emacs-lisp-mode-map (kbd "ESC") 'nil)
			(define-key emacs-lisp-mode-map (kbd "C-x") 'nil)
			(define-key emacs-lisp-mode-map (kbd "C-M-x") 'nil)
			(define-key emacs-lisp-mode-map (kbd "C-M-q") 'nil)

			;; bind
			(define-key emacs-lisp-mode-map (kbd "C-c C-f") 'eval-defun)
			(define-key emacs-lisp-mode-map (kbd "C-c C-r") 'eval-region)
			(define-key emacs-lisp-mode-map (kbd "C-c C-b") 'eval-buffer)
			(define-key emacs-lisp-mode-map (kbd "TAB") 'seconf-complete-in-buffer-or-indent)
			(define-key emacs-lisp-mode-map (kbd "C-c C-c") 'emacs-lisp-byte-compile))))

	  #+END_SRC

*** Go
**** Go-mode

	 The major mode for editing Go files.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'go-mode nil t)

	  #+END_SRC

***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf/go/set-company-backends ()
		"Set go company backends."
		(interactive)
		(seconf-set-company-backends
		 '((company-yasnippet :with
							  company-dabbrev
							  company-dabbrev-code)
		   (company-files))))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'go-mode-hook
				(lambda ()
				  ;; set company backends
				  (seconf/go/set-company-backends)

				  ;; set flycheck checker (go lint)
				  ;; (seconf-set-flycheck-checker 'go-golint)
				  (add-hook 'before-save-hook 'gofmt-before-save)
				  (customize-set-variable 'gofmt-command "goreturns")
				  ;; set dash docsets
				  (seconf-activate-docset '"Go")))

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; add (*.go . go-mode) to auto-mode-alist
	  ;; init go-mode when a file with the extersion .go is opened
	  (add-hook 'window-setup-hook
				(lambda ()
				  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; go-mode-map
	  (eval-after-load 'go-mode
		(lambda ()
		  (when (boundp 'go-mode-map)
			(define-key go-mode-map (kbd "TAB") 'seconf-complete-in-buffer-or-indent))))

	  #+END_SRC

*** Sh
**** Company-shell

	 Backend for company mode to complete environment variables, binaries found
	 on your $PATH and fish shell functions.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'company-shell nil t)

	  #+END_SRC

***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf/sh/set-company-backends ()
		"Set go company backends."
		(interactive)
		(seconf-set-company-backends
		 '((company-shell :with
						  company-shell-env
						  company-yasnippet)
		   (company-dabbrev
			company-dabbrev-code)
		   (company-files))))

	  #+END_SRC

**** Sh-script

	 Major mode for editing shell scripts. Bourne, C and rc shells as well
	 as various derivatives are supported and easily derived from. Structured
	 statements can be inserted with one command or abbrev. Completion is
	 available for filenames, variables known from the script, the shell and
	 the environment as well as commands.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'sh-script nil t)

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'sh-mode-hook
				(lambda ()
				  ;; set company backends
				  (seconf/sh/set-company-backends)))

	  ;; set flycheck backends
	  ;; (seconf-set-flycheck-checker 'sh-shellcheck)))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; sh-mode-map
	  (eval-after-load 'sh-mode
		(lambda ()
		  (when (boundp 'sh-mode-map)
			(define-key sh-mode-map (kbd "TAB")
			  'seconf-complete-in-buffer-or-indent))))

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; add (*.sh . sh-mode) to auto-mode-alist
	  ;; init sh-mode when a file with the extersion .sh is opened
	  (add-hook 'window-setup-hook
				(lambda ()
				  (add-to-list 'auto-mode-alist '("\\.sh\\'" . sh-mode))))

	  #+END_SRC

**** Fish-mode

	 Major mode for editing Fish shell files.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'fish-mode nil t)

	  #+END_SRC

***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf/fish/set-company-backends ()
		"Set fish company backends."
		(interactive)
		(seconf-set-company-backends
		 '((company-fish-shell :with
							   company-yasnippet)
		   (company-dabbrev
			company-dabbrev-code)
		   (company-files))))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'fish-mode-hook
				(lambda ()
				  ;; set company backends
				  (seconf/fish/set-company-backends)))

	  #+END_SRC

*** Lua
**** Lua-mode

	 Major mode for editing Lua files.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'lua-mode nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; non-nil means display lua-process-buffer after sending a command.
	  (customize-set-variable 'lua-process-buffer t)

	  ;; default application to run in Lua process
	  (customize-set-variable 'lua-default-application "lua")

	  ;; command switches for lua-default-application
	  (customize-set-variable 'lua-default-command-switches "-i")

	  ;; amount by which Lua subexpressions are indented
	  (customize-set-variable 'lua-indent-level 4)

	  ;; if non-nil, contents of multiline string will be indented
	  (customize-set-variable 'lua-indent-string-contents t)

	  ;; jump to innermost traceback location in *lua* buffer
	  ;; when this variable is non-nil and a traceback occurs
	  ;; when running Lua code in a process, jump immediately
	  ;; to the source code of the innermost traceback location
	  (customize-set-variable 'lua-jump-on-traceback t)

	  #+END_SRC

***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf/lua/set-company-backends ()
		"Set lua company backends."
		(interactive)
		(seconf-set-company-backends
		 '((company-yasnippet :with
							  company-dabbrev
							  company-dabbrev-code)
		   (company-files))))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'lua-mode-hook
				(lambda ()
				  ;; set company backends
				  (seconf/lua/set-company-backends)

				  ;; set flycheck checker
				  ;; (seconf-set-flycheck-checker 'lua)

				  ;; activate dash docset
				  (seconf-activate-docset "Lua")))

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  ;; add auto-mode
	  (add-hook 'window-setup-hook
				(lambda ()
				  (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
				  (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (eval-after-load 'lua-mode
		(lambda ()
		  (when (boundp 'lua-mode-map)
			(define-key lua-mode-map (kbd "TAB") 'seconf-complete-in-buffer-or-indent))))

	  #+END_SRC

*** Python
**** Python-mode

	 Major mode for editing Python files with some fontification and
	 indentation bits extracted from original Dave Love's python.el
	 found in GNU/Emacs.

	 Implements Syntax highlighting, Indentation, Movement, Shell
	 interaction, Shell completion, Shell virtualenv support, Shell
	 package support, Shell syntax highlighting, Pdb tracking, Symbol
	 completion, Skeletons, FFAP, Code Check, Eldoc, Imenu.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'python nil t)

	  #+END_SRC

***** Customize

	  #+BEGIN_SRC emacs-lisp

	  ;; default Python interpreter for shell
	  (customize-set-variable 'python-shell-interpreter "python")

	  ;; non-nil means template skeletons will be automagically inserted
	  (customize-set-variable 'python-skeleton-autoinsert t)

	  #+END_SRC

***** Functions

	  #+BEGIN_SRC emacs-lisp

	  (defun seconf/python/set-company-backends ()
		"Set python company backends."
		(interactive)
		(seconf-set-company-backends
		 '((company-keywords :with
							 company-yasnippet
							 company-dabbrev-code
							 company-dabbrev)
		   (company-dabbrev)
		   (company-files))))

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  ;; enable modes
	  (add-hook 'python-mode-hook
				(lambda()
				  ;; enable eldoc mode
				  (funcall 'eldoc-mode 1)))

	  ;; set backends
	  (add-hook 'python-mode-hook
				(lambda ()
				  ;; set company backends
				  (seconf/python/set-company-backends)

				  ;; set flycheck checker
				  ;; (seconf-set-flycheck-checker 'python-pycompile)

				  ;; set dash docsets
				  (seconf-activate-docset '"Python 3")))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  (eval-after-load 'python-mode
		(lambda ()
		  (when (boundp 'python-mode-map)
			(define-key python-mode-map (kbd "TAB") 'seconf-complete-in-buffer-or-indent))))

	  #+END_SRC

*** Mql
**** Mql-mode

	 Major mode for editing Mql files: work in progress!

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'mql-mode)

	  #+END_SRC

***** Hooks

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'mql-mode-hook
				(lambda ()
				  ;; set company backends
				  (seconf-set-company-backends
				   '((company-etags
					  company-yasnippet
					  company-dabbrev
					  company-dabbrev-code)
					 (company-files)))))

				  ;; select flycheck checker (use gcc)
				  ;; (seconf-set-flycheck-checker 'c/c++-gcc)

				  ;; activate mql5 docset
				  ;; (seconf-activate-docset '"mql5")))

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

			;; add (*.mq5 . mql-mode) to auto-mode-alist
			;; init go-mode when a file with the extersion .go is opened
			(add-hook 'window-setup-hook
					  (lambda ()
						(add-to-list 'auto-mode-alist '("\\.mq5$" . mql-mode))
						(add-to-list 'auto-mode-alist '("\\.mqh$" . mql-mode))))

	  #+END_SRC

***** Binds

	  #+BEGIN_SRC emacs-lisp

	  ;; c-mode-map
	  (eval-after-load 'mql-mode
		(lambda ()
		  (when (boundp 'mql-mode-map)
			(define-key mql-mode-map (kbd "TAB") 'seconf-complete-in-buffer-or-indent))))

	  #+END_SRC

*** Web
**** Web-mode

	 Web-mode is an emacs major mode for editing web templates aka
	 HTML files embedding parts (CSS/JavaScript) and blocks
	 (pre rendered by client/server side engines).

	 Web-mode compatible with many template engines: PHP, JSP, ASP,
	 Django, Twig, Jinja, Mustache, ERB, FreeMarker,
	 Velocity, Cheetah, Smarty, CTemplate, Mustache, Blade, ErlyDTL,
	 Go Template, Dust.js, Google Closure (soy), React/JSX,
	 Angularjs, ejs, Nunjucks, etc.

***** Require

	  #+BEGIN_SRC emacs-lisp

	  ;; (require 'web-mode nil t)

	  #+END_SRC

***** Enable

	  #+BEGIN_SRC emacs-lisp

	  (add-hook 'window-setup-hook
				(lambda ()
				  ;; add files extensions to web-mode
				  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
				  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
				  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
				  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
				  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
				  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
				  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
				  ;; resolve warning
				  (when (boundp 'web-mode-engines-alist)
					(add-to-list 'web-mode-engines-alist '(("php" . "\\.phtml\\'"))))))

	  #+END_SRC

** Cleanup

   A small set of keybinds provides (IMO) better quality of life, and
   if needed, exotic commands can be called through
   =execute-extended-command=, a.k.a. =M-x= or, even better, the
   =minibuffer console=.

**** Esc

	 Clean/unbind keys from esc-map.

	 #+BEGIN_SRC emacs-lisp

	 ;; clean esc map
	 ;; (define-key esc-map (kbd "ESC") nil)
	 (define-key esc-map (kbd "<f10>") nil)

	 #+END_SRC

**** Ctl-x

	 Clean/unbind keys from ctl-x-map.

	 #+BEGIN_SRC emacs-lisp

	 (define-key ctl-x-map (kbd "C-o") nil)

	 #+END_SRC

**** Minor

	 Clean minor-mode-map-alist.

	 #+BEGIN_SRC emacs-lisp

	 (add-hook 'window-setup-hook
			   (lambda ()
				 (setq minor-mode-map-alist nil)))

	 #+END_SRC

**** Global

	 Clean/unbind keys from global-map.

	 #+BEGIN_SRC emacs-lisp

	 ;; unset
	 (global-unset-key (kbd "C-z"))
	 (global-unset-key (kbd "C-\\"))
	 (global-unset-key (kbd "C-_"))
	 ;;(global-unset-key (kbd "M-l"))
	 ;; (global-unset-key (kbd "M-h"))
	 ;; (global-unset-key (kbd "M-\\"))
	 (global-unset-key (kbd "M-("))
	 (global-unset-key (kbd "M-)"))
	 ;; (global-unset-key (kbd "M-r"))
	 (global-unset-key (kbd "M-{"))
	 (global-unset-key (kbd "M-}"))
	 (global-unset-key (kbd "S-SPC"))
	 (global-unset-key (kbd "<backtap>"))
	 (global-unset-key (kbd "M-="))
	 (global-unset-key (kbd "M-@"))
	 (global-unset-key (kbd "M-~"))

	 ;; (global-unset-key (kbd "M-z"))
	 ;; (global-unset-key (kbd "M-SPC"))
	 ;; (global-unset-key (kbd "M-m"))
	 ;; (global-unset-key (kbd "M-k"))
	 ;; (global-unset-key (kbd "M-t"))
	 ;; (global-unset-key (kbd "M-q"))

	 (global-unset-key (kbd "C-M-h"))
	 (global-unset-key (kbd "C-M-j"))
	 (global-unset-key (kbd "C-M-."))
	 (global-unset-key (kbd "C-M-l"))
	 (global-unset-key (kbd "C-M-/"))
	 ;; (global-unset-key (kbd "C-M-;"))
	 (global-unset-key (kbd "C-M-@"))
	 (global-unset-key (kbd "C-M-\\"))
	 (global-unset-key (kbd "C-M-a"))
	 (global-unset-key (kbd "C-M-r"))
	 (global-unset-key (kbd "C-M-s"))
	 (global-unset-key (kbd "C-M-%"))
	 (global-unset-key (kbd "C-M-u"))
	 (global-unset-key (kbd "C-M-d"))
	 (global-unset-key (kbd "C-M-SPC"))
	 (global-unset-key (kbd "C-M-S-v"))

	 (global-unset-key (kbd "<C-M-end>"))
	 (global-unset-key (kbd "<C-M-home>"))
	 (global-unset-key (kbd "<C-S-backspace>"))
	 (global-unset-key (kbd "<C-backspace>"))
	 (global-unset-key (kbd "<C-delete>"))
	 (global-unset-key (kbd "<C-down>"))
	 (global-unset-key (kbd "<C-next>"))
	 (global-unset-key (kbd "<C-end>"))
	 (global-unset-key (kbd "<C-f10>"))
	 (global-unset-key (kbd "<M-f10>"))

	 (global-unset-key (kbd "<f10>"))
	 (global-unset-key (kbd "<f11>"))
	 (global-unset-key (kbd "<f16>"))
	 (global-unset-key (kbd "<f18>"))
	 (global-unset-key (kbd "<f20>"))

	 #+END_SRC

	 # ** Unbind
	 # *** Global

	 #     Quality of life.

	 #     #+BEGIN_SRC emacs-lisp

	 #     ;; unset
	 #     (global-unset-key (kbd "C-z"))
	 #     (global-unset-key (kbd "C-@"))
	 #     (global-unset-key (kbd "C-\\"))
	 #     ;; (global-unset-key (kbd "C-_"))
	 #     (global-unset-key (kbd "M-l"))
	 #     (global-unset-key (kbd "M-h"))
	 #     (global-unset-key (kbd "M-\\"))
	 #     (global-unset-key (kbd "M-$"))
	 #     (global-unset-key (kbd "M-("))
	 #     (global-unset-key (kbd "M-)"))
	 #     (global-unset-key (kbd "M-r"))
	 #     (global-unset-key (kbd "M-{"))
	 #     (global-unset-key (kbd "M-}"))
	 #     (global-unset-key (kbd "S-SPC"))
	 #     (global-unset-key (kbd "<backtap>"))
	 #     (global-unset-key (kbd "M-="))
	 #     (global-unset-key (kbd "M-@"))
	 #     (global-unset-key (kbd "M-~"))

	 #     ;; (global-unset-key (kbd "M-z"))
	 #     ;; (global-unset-key (kbd "M-SPC"))
	 #     ;; (global-unset-key (kbd "M-m"))
	 #     ;; (global-unset-key (kbd "M-k"))
	 #     ;; (global-unset-key (kbd "M-t"))
	 #     ;; (global-unset-key (kbd "M-q"))

	 #     (global-unset-key (kbd "C-M-h"))
	 #     (global-unset-key (kbd "C-M-j"))
	 #     (global-unset-key (kbd "C-M-."))
	 #     (global-unset-key (kbd "C-M-l"))
	 #     (global-unset-key (kbd "C-M-/"))
	 #     (global-unset-key (kbd "C-M-;"))
	 #     (global-unset-key (kbd "C-M-@"))
	 #     (global-unset-key (kbd "C-M-\\"))
	 #     (global-unset-key (kbd "C-M-a"))
	 #     (global-unset-key (kbd "C-M-r"))
	 #     (global-unset-key (kbd "C-M-s"))
	 #     (global-unset-key (kbd "C-M-%"))
	 #     (global-unset-key (kbd "C-M-u"))
	 #     (global-unset-key (kbd "C-M-d"))
	 #     (global-unset-key (kbd "C-M-SPC"))
	 #     (global-unset-key (kbd "C-M-S-v"))

	 #     (global-unset-key (kbd "<C-M-end>"))
	 #     (global-unset-key (kbd "<C-M-home>"))
	 #     (global-unset-key (kbd "<C-S-backspace>"))
	 #     (global-unset-key (kbd "<C-backspace>"))
	 #     (global-unset-key (kbd "<C-delete>"))
	 #     (global-unset-key (kbd "<C-down>"))
	 #     (global-unset-key (kbd "<C-next>"))
	 #     (global-unset-key (kbd "<C-end>"))
	 #     (global-unset-key (kbd "<C-f10>"))
	 #     (global-unset-key (kbd "<M-f10>"))

	 #     (global-unset-key (kbd "<bottom-divider>"))
	 #     (global-unset-key (kbd "<bottom-edge>"))
	 #     (global-unset-key (kbd "<bottom-left-corner>"))
	 #     (global-unset-key (kbd "<bottom-right-corner>"))

	 #     (global-unset-key (kbd "<horizontal-scroll-bar>"))
	 #     (global-unset-key (kbd "<vertical-scroll-bar>"))

	 #     (global-unset-key (kbd "<left-edge>"))
	 #     (global-unset-key (kbd "<right-edge>"))

	 #     (global-unset-key (kbd "<undo>"))
	 #     (global-unset-key (kbd "<find>"))
	 #     (global-unset-key (kbd "<help>"))
	 #     (global-unset-key (kbd "<open>"))
	 #     (global-unset-key (kbd "<again>"))
	 #     (global-unset-key (kbd "<menu>"))
	 #     (global-unset-key (kbd "<header-line>"))
	 #     (global-unset-key (kbd "<mode-line>"))

	 #     (global-unset-key (kbd "<XF86Back>"))
	 #     (global-unset-key (kbd "<XF86Forward>"))
	 #     (global-unset-key (kbd "<XF86WakeUp>"))

	 #     (global-unset-key (kbd "<top-edge>"))
	 #     (global-unset-key (kbd "<top-left-corner>"))
	 #     (global-unset-key (kbd "<top-right-corner>"))

	 #     (global-unset-key (kbd "<mouse-1>"))
	 #     (global-unset-key (kbd "<mouse-2>"))
	 #     (global-unset-key (kbd "<mouse-3>"))
	 #     (global-unset-key (kbd "<mouse-4>"))
	 #     (global-unset-key (kbd "<mouse-5>"))
	 #     (global-unset-key (kbd "<mouse-6>"))
	 #     (global-unset-key (kbd "<mouse-7>"))

	 #     (global-unset-key (kbd "<right-divider>"))
	 #     (global-unset-key (kbd "<vertical-line>"))

	 #     (global-unset-key (kbd "<f10>"))
	 #     (global-unset-key (kbd "<f11>"))
	 #     (global-unset-key (kbd "<f16>"))
	 #     (global-unset-key (kbd "<f18>"))
	 #     (global-unset-key (kbd "<f20>"))

	 #     (global-unset-key (kbd "<drag-mouse-1>"))
	 #     (global-unset-key (kbd "<C-mouse-4>"))
	 #     (global-unset-key (kbd "<C-mouse-5>"))
	 #     (global-unset-key (kbd "<C-mouse-6>"))
	 #     (global-unset-key (kbd "<C-mouse-7>"))
	 #     (global-unset-key (kbd "<M-mouse-1>"))
	 #     (global-unset-key (kbd "<M-mouse-2>"))
	 #     (global-unset-key (kbd "<M-mouse-3>"))
	 #     (global-unset-key (kbd "<S-mouse-3>"))
	 #     (global-unset-key (kbd "<S-mouse-4>"))
	 #     (global-unset-key (kbd "<S-mouse-5>"))
	 #     (global-unset-key (kbd "<S-mouse-6>"))
	 #     (global-unset-key (kbd "<S-mouse-7>"))
	 #     (global-unset-key (kbd "<C-down-mouse-1>"))
	 #     (global-unset-key (kbd "<C-down-mouse-2>"))
	 #     (global-unset-key (kbd "<M-down-mouse-1>"))
	 #     (global-unset-key (kbd "<M-drag-mouse-1>"))
	 #     (global-unset-key (kbd "<S-down-mouse-1>"))

	 #     #+END_SRC

	 # *** Minor

	 #     Clean minor-mode-map-alist.

	 #     #+BEGIN_SRC emacs-lisp

	 #     ;; clean minor-mode-map-alist
	 #     (setq minor-mode-map-alist nil)

	 #     #+END_SRC

	 # *** Prefix
	 # **** Ctl-x

	 #      Quality of life.

	 #      #+BEGIN_SRC emacs-lisp

	 #      ;; unbind
	 #      ;; (define-key ctl-x-map (kbd "C-SPC") nil)
	 #      ;; (define-key ctl-x-map (kbd "C-=") nil)
	 #      ;; (define-key ctl-x-map (kbd "C-0") nil)
	 #      ;; (define-key ctl-x-map (kbd "C-z") nil)
	 #      ;; (define-key ctl-x-map (kbd "C--") nil)
	 #      ;; (define-key ctl-x-map (kbd "ESC") nil)
	 #      ;; (define-key ctl-x-map (kbd ".") nil)
	 #      (define-key ctl-x-map (kbd "C-l") nil)
	 #      (define-key ctl-x-map (kbd "C-d") nil)
	 #      (define-key ctl-x-map (kbd "C-z") nil)
	 #      (define-key ctl-x-map (kbd "C-<left>") nil)
	 #      (define-key ctl-x-map (kbd "C-<right>") nil)
	 #      (define-key ctl-x-map (kbd "C-<up>") nil)
	 #      (define-key ctl-x-map (kbd "C-<down>") nil)
	 #      (define-key ctl-x-map (kbd "<right>") nil)
	 #      (define-key ctl-x-map (kbd "<left>") nil)
	 #      (define-key ctl-x-map (kbd "C-+") nil)
	 #      (define-key ctl-x-map (kbd "C-a") nil)
	 #      (define-key ctl-x-map (kbd "C-r") nil)
	 #      (define-key ctl-x-map (kbd "C-n") nil)
	 #      (define-key ctl-x-map (kbd "C-p") nil)
	 #      (define-key ctl-x-map (kbd "C-o") nil)
	 #      (define-key ctl-x-map (kbd "C-h") nil)
	 #      (define-key ctl-x-map (kbd "C-u") nil)
	 #      (define-key ctl-x-map (kbd "C-\@") nil)
	 #      (define-key ctl-x-map (kbd "M-:") nil)
	 #      (define-key ctl-x-map (kbd "`") nil)
	 #      (define-key ctl-x-map (kbd "]") nil)
	 #      ;; (define-key ctl-x-map (kbd "[") nil)
	 #      (define-key ctl-x-map (kbd ")") nil)
	 #      (define-key ctl-x-map (kbd "(") nil)
	 #      (define-key ctl-x-map (kbd "<") nil)
	 #      (define-key ctl-x-map (kbd ">") nil)
	 #      (define-key ctl-x-map (kbd "\@") nil)
	 #      (define-key ctl-x-map (kbd "-") nil)
	 #      (define-key ctl-x-map (kbd ";") nil)
	 #      (define-key ctl-x-map (kbd "#") nil)
	 #      (define-key ctl-x-map (kbd "*") nil)
	 #      (define-key ctl-x-map (kbd "'") nil)
	 #      (define-key ctl-x-map (kbd "$") nil)
	 #      (define-key ctl-x-map (kbd "{") nil)
	 #      (define-key ctl-x-map (kbd "}") nil)
	 #      (define-key ctl-x-map (kbd "^") nil)
	 #      (define-key ctl-x-map (kbd "n") nil)
	 #      (define-key ctl-x-map (kbd "f") nil)
	 #      (define-key ctl-x-map (kbd "a") nil)
	 #      (define-key ctl-x-map (kbd "h") nil)
	 #      (define-key ctl-x-map (kbd "v") nil)
	 #      (define-key ctl-x-map (kbd "X") nil)

	 #      #+END_SRC

	 # **** Esc

	 #      Quality of life.

	 #      #+BEGIN_SRC emacs-lisp

	 #      ;; clean esc map
	 #      (define-key esc-map (kbd "ESC") nil)
	 #      (define-key esc-map (kbd "<f10>") nil)

	 #      #+END_SRC

** Load Custom-file

   #+BEGIN_SRC emacs-lisp

   (load custom-file)

   #+END_SRC

* EOF
